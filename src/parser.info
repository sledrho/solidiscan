-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from parser.y
-----------------------------------------------------------------------------


rule 4 is unused
rule 5 is unused
rule 6 is unused
rule 7 is unused
rule 8 is unused
rule 9 is unused
rule 10 is unused

terminal "reservedid" is unused
terminal "decimalnum" is unused
terminal "exponent" is unused
terminal "int" is unused
terminal "import" is unused
terminal "public" is unused
terminal "contract" is unused
terminal "boolean" is unused
terminal "true" is unused
terminal "!" is unused
terminal "&&" is unused
terminal "||" is unused
terminal "!=" is unused
terminal "<" is unused
terminal ">" is unused
terminal "<=" is unused
terminal ">=" is unused
terminal "==" is unused
terminal "{" is unused
terminal "}" is unused
terminal "[" is unused
terminal "]" is unused
terminal "." is unused
terminal "=" is unused
terminal "*" is unused
terminal "/" is unused
terminal "**" is unused
terminal "%" is unused
terminal "+" is unused
terminal "-" is unused
terminal stringLiteral is unused
terminal "(" is unused
terminal ")" is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_solidiscan -> ProgSource                    (0)
	ProgSource -> SourceUnit                           (1)
	SourceUnit -> PragmaDirective                      (2)
	PragmaDirective -> "pragma" ident ";"              (3)
	ImportDirective -> "import" stringLiteral ";"      (4)
	ContractDefinition -> "contract" ident "{" ContractPart "}"   (5)
	ContractPart -> StateVariableDeclaration           (6)
	StateVariableDeclaration -> TypeName "public" ident "=" Expression ";"   (7)
	TypeName -> ElementaryTypeName                     (8)
	ElementaryTypeName -> stringLiteral                (9)
	Expression -> Expression "+" Expression            (10)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"reservedid"   { TReservedOp }
	"decimalnum"   { TDec $$ }
	"exponent"     { TExp $$ }
	"int"          { TInt $$ }
	"pragma"       { TPragma }
	"import"       { TImport }
	"public"       { TPublic }
	"contract"     { TContract }
	"boolean"      { TBooleanLit }
	"true"         { TTrue }
	"!"            { TNegate }
	"&&"           { TAnd }
	"||"           { TOr }
	"!="           { TInEqual }
	"<"            { TLThan }
	">"            { TGThan }
	"<="           { TLTEq }
	">="           { TGTEq }
	"=="           { TEquality }
	"{"            { TLCurl }
	"}"            { TRCurl }
	"["            { TLBrack }
	"]"            { TRBrack }
	"."            { TPeriod }
	"="            { TEquals }
	"*"            { TMult }
	"/"            { TDiv }
	"**"           { TExpSym }
	"%"            { TModul }
	"+"            { TPlus }
	"-"            { TSub }
	";"            { TSemiCol }
	ident          { TIdent $$ }
	stringLiteral  { TStringLiteral $$ }
	"("            { TLeftParen }
	")"            { TRightParen }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_solidiscan rule  0
	ProgSource      rule  1
	SourceUnit      rule  2
	PragmaDirective rule  3
	ImportDirective rule  4
	ContractDefinition rule  5
	ContractPart    rule  6
	StateVariableDeclaration rule  7
	TypeName        rule  8
	ElementaryTypeName rule  9
	Expression      rule  10

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"pragma"       shift, and enter state 4

	ProgSource     goto state 5
	SourceUnit     goto state 2
	PragmaDirectivegoto state 3

State 1


	"pragma"       shift, and enter state 4

	SourceUnit     goto state 2
	PragmaDirectivegoto state 3

State 2

	ProgSource -> SourceUnit .                          (rule 1)

	%eof           reduce using rule 1


State 3

	SourceUnit -> PragmaDirective .                     (rule 2)

	%eof           reduce using rule 2


State 4

	PragmaDirective -> "pragma" . ident ";"             (rule 3)

	ident          shift, and enter state 6


State 5

	%start_solidiscan -> ProgSource .                   (rule 0)

	%eof           accept


State 6

	PragmaDirective -> "pragma" ident . ";"             (rule 3)

	";"            shift, and enter state 7


State 7

	PragmaDirective -> "pragma" ident ";" .             (rule 3)

	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 11
Number of terminals: 36
Number of non-terminals: 11
Number of states: 8
