-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from parser.y
-----------------------------------------------------------------------------


rule 14 is unused
rule 15 is unused

terminal "reservedid" is unused
terminal "decimalnum" is unused
terminal "exponent" is unused
terminal "int" is unused
terminal "boolean" is unused
terminal "true" is unused
terminal "!" is unused
terminal "&&" is unused
terminal "||" is unused
terminal "!=" is unused
terminal "<" is unused
terminal ">" is unused
terminal "<=" is unused
terminal ">=" is unused
terminal "==" is unused
terminal "[" is unused
terminal "]" is unused
terminal "." is unused
terminal "=" is unused
terminal "*" is unused
terminal "/" is unused
terminal "**" is unused
terminal "%" is unused
terminal op is unused
terminal "-" is unused
terminal "(" is unused
terminal ")" is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_solidiscan -> SourceUnit                    (0)
	SourceUnit ->                                      (1)
	SourceUnit -> SourceUnit SourceUnitSol             (2)
	SourceUnitSol -> PragmaDirective                   (3)
	SourceUnitSol -> ImportDirective                   (4)
	SourceUnitSol -> ContractDefinition                (5)
	PragmaDirective -> "pragma" ident ";"              (6)
	ImportDirective -> "import" stringLiteral ";"      (7)
	ContractDefinition -> contract ident "{" list1(ContractPart) "}"   (8)
	ContractPart -> StateVariableDeclaration           (9)
	ContractPart -> FunctionDefinition                 (10)
	FunctionDefinition -> "function" ident Parameter ";"   (11)
	Parameter -> ident                                 (12)
	StateVariableDeclaration -> TypeName AssVar ident ";"   (13)
	AssVarL -> AssVar                                  (14)
	AssVarL -> AssVarL AssVar                          (15)
	AssVar -> "public"                                 (16)
	AssVar -> "internal"                               (17)
	AssVar -> "private"                                (18)
	AssVar -> "constant"                               (19)
	TypeName -> ident                                  (20)
	list1(ContractPart) -> ContractPart                (21)
	list1(ContractPart) -> ContractPart list1(ContractPart)   (22)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"reservedid"   { TReservedOp _ }
	"decimalnum"   { TDec _ $$ }
	"exponent"     { TExp _ $$ }
	"int"          { TInt _ $$ }
	"pragma"       { TPragma _ }
	"import"       { TImport _ }
	"public"       { TPublic _ }
	"internal"     { TIntern _ }
	"private"      { TPriv _ }
	"constant"     { TConst _ }
	contract       { TContract _ }
	"function"     { TFuncDef _ }
	"boolean"      { TBooleanLit _ }
	"true"         { TTrue _ }
	"!"            { TNegate _ }
	"&&"           { TAnd _ }
	"||"           { TOr _ }
	"!="           { TInEqual _ }
	"<"            { TLThan _ }
	">"            { TGThan _ }
	"<="           { TLTEq _ }
	">="           { TGTEq _ }
	"=="           { TEquality _ }
	"{"            { TLCurl _ }
	"}"            { TRCurl _ }
	"["            { TLBrack _ }
	"]"            { TRBrack _ }
	"."            { TPeriod _ }
	"="            { TEquals _ }
	"*"            { TMult _ }
	"/"            { TDiv _ }
	"**"           { TExpSym _ }
	"%"            { TModul _ }
	op             { TOp _ $$ }
	"-"            { TSub _ }
	";"            { TSemiCol _ }
	ident          { TIdent _ $$ }
	stringLiteral  { TStringLiteral _ $$ }
	"("            { TLeftParen _ }
	")"            { TRightParen _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_solidiscan rule  0
	SourceUnit      rules 1, 2
	SourceUnitSol   rules 3, 4, 5
	PragmaDirective rule  6
	ImportDirective rule  7
	ContractDefinition rule  8
	ContractPart    rules 9, 10
	FunctionDefinition rule  11
	Parameter       rule  12
	StateVariableDeclaration rule  13
	AssVarL         rules 14, 15
	AssVar          rules 16, 17, 18, 19
	TypeName        rule  20
	list1(ContractPart) rules 21, 22

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"pragma"       reduce using rule 1
	"import"       reduce using rule 1
	contract       reduce using rule 1
	%eof           reduce using rule 1

	SourceUnit     goto state 2

State 1




State 2

	%start_solidiscan -> SourceUnit .                   (rule 0)
	SourceUnit -> SourceUnit . SourceUnitSol            (rule 2)

	"pragma"       shift, and enter state 7
	"import"       shift, and enter state 8
	contract       shift, and enter state 9
	%eof           accept

	SourceUnitSol  goto state 3
	PragmaDirectivegoto state 4
	ImportDirectivegoto state 5
	ContractDefinitiongoto state 6

State 3

	SourceUnit -> SourceUnit SourceUnitSol .            (rule 2)

	"pragma"       reduce using rule 2
	"import"       reduce using rule 2
	contract       reduce using rule 2
	%eof           reduce using rule 2


State 4

	SourceUnitSol -> PragmaDirective .                  (rule 3)

	"pragma"       reduce using rule 3
	"import"       reduce using rule 3
	contract       reduce using rule 3
	%eof           reduce using rule 3


State 5

	SourceUnitSol -> ImportDirective .                  (rule 4)

	"pragma"       reduce using rule 4
	"import"       reduce using rule 4
	contract       reduce using rule 4
	%eof           reduce using rule 4


State 6

	SourceUnitSol -> ContractDefinition .               (rule 5)

	"pragma"       reduce using rule 5
	"import"       reduce using rule 5
	contract       reduce using rule 5
	%eof           reduce using rule 5


State 7

	PragmaDirective -> "pragma" . ident ";"             (rule 6)

	ident          shift, and enter state 12


State 8

	ImportDirective -> "import" . stringLiteral ";"     (rule 7)

	stringLiteral  shift, and enter state 11


State 9

	ContractDefinition -> contract . ident "{" list1(ContractPart) "}"    (rule 8)

	ident          shift, and enter state 10


State 10

	ContractDefinition -> contract ident . "{" list1(ContractPart) "}"    (rule 8)

	"{"            shift, and enter state 15


State 11

	ImportDirective -> "import" stringLiteral . ";"     (rule 7)

	";"            shift, and enter state 14


State 12

	PragmaDirective -> "pragma" ident . ";"             (rule 6)

	";"            shift, and enter state 13


State 13

	PragmaDirective -> "pragma" ident ";" .             (rule 6)

	"pragma"       reduce using rule 6
	"import"       reduce using rule 6
	contract       reduce using rule 6
	%eof           reduce using rule 6


State 14

	ImportDirective -> "import" stringLiteral ";" .     (rule 7)

	"pragma"       reduce using rule 7
	"import"       reduce using rule 7
	contract       reduce using rule 7
	%eof           reduce using rule 7


State 15

	ContractDefinition -> contract ident "{" . list1(ContractPart) "}"    (rule 8)

	"function"     shift, and enter state 21
	ident          shift, and enter state 22

	ContractPart   goto state 16
	FunctionDefinitiongoto state 17
	StateVariableDeclarationgoto state 18
	TypeName       goto state 19
	list1(ContractPart)goto state 20

State 16

	list1(ContractPart) -> ContractPart .               (rule 21)
	list1(ContractPart) -> ContractPart . list1(ContractPart)    (rule 22)

	"function"     shift, and enter state 21
	"}"            reduce using rule 21
	ident          shift, and enter state 22

	ContractPart   goto state 16
	FunctionDefinitiongoto state 17
	StateVariableDeclarationgoto state 18
	TypeName       goto state 19
	list1(ContractPart)goto state 30

State 17

	ContractPart -> FunctionDefinition .                (rule 10)

	"function"     reduce using rule 10
	"}"            reduce using rule 10
	ident          reduce using rule 10


State 18

	ContractPart -> StateVariableDeclaration .          (rule 9)

	"function"     reduce using rule 9
	"}"            reduce using rule 9
	ident          reduce using rule 9


State 19

	StateVariableDeclaration -> TypeName . AssVar ident ";"    (rule 13)

	"public"       shift, and enter state 26
	"internal"     shift, and enter state 27
	"private"      shift, and enter state 28
	"constant"     shift, and enter state 29

	AssVar         goto state 25

State 20

	ContractDefinition -> contract ident "{" list1(ContractPart) . "}"    (rule 8)

	"}"            shift, and enter state 24


State 21

	FunctionDefinition -> "function" . ident Parameter ";"    (rule 11)

	ident          shift, and enter state 23


State 22

	TypeName -> ident .                                 (rule 20)

	"public"       reduce using rule 20
	"internal"     reduce using rule 20
	"private"      reduce using rule 20
	"constant"     reduce using rule 20


State 23

	FunctionDefinition -> "function" ident . Parameter ";"    (rule 11)

	ident          shift, and enter state 33

	Parameter      goto state 32

State 24

	ContractDefinition -> contract ident "{" list1(ContractPart) "}" .    (rule 8)

	"pragma"       reduce using rule 8
	"import"       reduce using rule 8
	contract       reduce using rule 8
	%eof           reduce using rule 8


State 25

	StateVariableDeclaration -> TypeName AssVar . ident ";"    (rule 13)

	ident          shift, and enter state 31


State 26

	AssVar -> "public" .                                (rule 16)

	ident          reduce using rule 16


State 27

	AssVar -> "internal" .                              (rule 17)

	ident          reduce using rule 17


State 28

	AssVar -> "private" .                               (rule 18)

	ident          reduce using rule 18


State 29

	AssVar -> "constant" .                              (rule 19)

	ident          reduce using rule 19


State 30

	list1(ContractPart) -> ContractPart list1(ContractPart) .    (rule 22)

	"}"            reduce using rule 22


State 31

	StateVariableDeclaration -> TypeName AssVar ident . ";"    (rule 13)

	";"            shift, and enter state 35


State 32

	FunctionDefinition -> "function" ident Parameter . ";"    (rule 11)

	";"            shift, and enter state 34


State 33

	Parameter -> ident .                                (rule 12)

	";"            reduce using rule 12


State 34

	FunctionDefinition -> "function" ident Parameter ";" .    (rule 11)

	"function"     reduce using rule 11
	"}"            reduce using rule 11
	ident          reduce using rule 11


State 35

	StateVariableDeclaration -> TypeName AssVar ident ";" .    (rule 13)

	"function"     reduce using rule 13
	"}"            reduce using rule 13
	ident          reduce using rule 13


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 23
Number of terminals: 40
Number of non-terminals: 14
Number of states: 36
