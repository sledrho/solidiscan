-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from parser.y
-----------------------------------------------------------------------------


rule 9 is unused
rule 10 is unused
rule 14 is unused

terminal "reservedid" is unused
terminal "decimalnum" is unused
terminal "exponent" is unused
terminal "int" is unused
terminal "boolean" is unused
terminal "true" is unused
terminal "!" is unused
terminal "&&" is unused
terminal "||" is unused
terminal "!=" is unused
terminal "<" is unused
terminal ">" is unused
terminal "<=" is unused
terminal ">=" is unused
terminal "==" is unused
terminal "[" is unused
terminal "]" is unused
terminal "." is unused
terminal "=" is unused
terminal "*" is unused
terminal "/" is unused
terminal "**" is unused
terminal "%" is unused
terminal op is unused
terminal "-" is unused
terminal "(" is unused
terminal ")" is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_solidiscan -> SourceUnit                    (0)
	SourceUnit ->                                      (1)
	SourceUnit -> SourceUnit SourceUnitSol             (2)
	SourceUnitSol -> PragmaDirective                   (3)
	SourceUnitSol -> ImportDirective                   (4)
	SourceUnitSol -> ContractDefinition                (5)
	PragmaDirective -> "pragma" ident ";"              (6)
	ImportDirective -> "import" stringLiteral ";"      (7)
	ContractDefinition -> contract ident "{" ContractPart "}"   (8)
	ContractZM ->                                      (9)
	ContractZM -> ContractZM ContractPart              (10)
	ContractPart -> StateVariableDeclaration           (11)
	ContractPart -> FunctionDefinition                 (12)
	FunctionDefinition -> "function" ident Parameter ";"   (13)
	ParameterList -> Parameter                         (14)
	Parameter -> ident                                 (15)
	StateVariableDeclaration -> TypeName "public" ident ";"   (16)
	TypeName -> ident                                  (17)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"reservedid"   { TReservedOp _ }
	"decimalnum"   { TDec _ $$ }
	"exponent"     { TExp _ $$ }
	"int"          { TInt _ $$ }
	"pragma"       { TPragma _ }
	"import"       { TImport _ }
	"public"       { TPublic _ }
	contract       { TContract _ }
	"function"     { TFuncDef _ }
	"boolean"      { TBooleanLit _ }
	"true"         { TTrue _ }
	"!"            { TNegate _ }
	"&&"           { TAnd _ }
	"||"           { TOr _ }
	"!="           { TInEqual _ }
	"<"            { TLThan _ }
	">"            { TGThan _ }
	"<="           { TLTEq _ }
	">="           { TGTEq _ }
	"=="           { TEquality _ }
	"{"            { TLCurl _ }
	"}"            { TRCurl _ }
	"["            { TLBrack _ }
	"]"            { TRBrack _ }
	"."            { TPeriod _ }
	"="            { TEquals _ }
	"*"            { TMult _ }
	"/"            { TDiv _ }
	"**"           { TExpSym _ }
	"%"            { TModul _ }
	op             { TOp _ $$ }
	"-"            { TSub _ }
	";"            { TSemiCol _ }
	ident          { TIdent _ $$ }
	stringLiteral  { TStringLiteral _ $$ }
	"("            { TLeftParen _ }
	")"            { TRightParen _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_solidiscan rule  0
	SourceUnit      rules 1, 2
	SourceUnitSol   rules 3, 4, 5
	PragmaDirective rule  6
	ImportDirective rule  7
	ContractDefinition rule  8
	ContractZM      rules 9, 10
	ContractPart    rules 11, 12
	FunctionDefinition rule  13
	ParameterList   rule  14
	Parameter       rule  15
	StateVariableDeclaration rule  16
	TypeName        rule  17

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"pragma"       reduce using rule 1
	"import"       reduce using rule 1
	contract       reduce using rule 1
	%eof           reduce using rule 1

	SourceUnit     goto state 2

State 1




State 2

	%start_solidiscan -> SourceUnit .                   (rule 0)
	SourceUnit -> SourceUnit . SourceUnitSol            (rule 2)

	"pragma"       shift, and enter state 7
	"import"       shift, and enter state 8
	contract       shift, and enter state 9
	%eof           accept

	SourceUnitSol  goto state 3
	PragmaDirectivegoto state 4
	ImportDirectivegoto state 5
	ContractDefinitiongoto state 6

State 3

	SourceUnit -> SourceUnit SourceUnitSol .            (rule 2)

	"pragma"       reduce using rule 2
	"import"       reduce using rule 2
	contract       reduce using rule 2
	%eof           reduce using rule 2


State 4

	SourceUnitSol -> PragmaDirective .                  (rule 3)

	"pragma"       reduce using rule 3
	"import"       reduce using rule 3
	contract       reduce using rule 3
	%eof           reduce using rule 3


State 5

	SourceUnitSol -> ImportDirective .                  (rule 4)

	"pragma"       reduce using rule 4
	"import"       reduce using rule 4
	contract       reduce using rule 4
	%eof           reduce using rule 4


State 6

	SourceUnitSol -> ContractDefinition .               (rule 5)

	"pragma"       reduce using rule 5
	"import"       reduce using rule 5
	contract       reduce using rule 5
	%eof           reduce using rule 5


State 7

	PragmaDirective -> "pragma" . ident ";"             (rule 6)

	ident          shift, and enter state 12


State 8

	ImportDirective -> "import" . stringLiteral ";"     (rule 7)

	stringLiteral  shift, and enter state 11


State 9

	ContractDefinition -> contract . ident "{" ContractPart "}"    (rule 8)

	ident          shift, and enter state 10


State 10

	ContractDefinition -> contract ident . "{" ContractPart "}"    (rule 8)

	"{"            shift, and enter state 15


State 11

	ImportDirective -> "import" stringLiteral . ";"     (rule 7)

	";"            shift, and enter state 14


State 12

	PragmaDirective -> "pragma" ident . ";"             (rule 6)

	";"            shift, and enter state 13


State 13

	PragmaDirective -> "pragma" ident ";" .             (rule 6)

	"pragma"       reduce using rule 6
	"import"       reduce using rule 6
	contract       reduce using rule 6
	%eof           reduce using rule 6


State 14

	ImportDirective -> "import" stringLiteral ";" .     (rule 7)

	"pragma"       reduce using rule 7
	"import"       reduce using rule 7
	contract       reduce using rule 7
	%eof           reduce using rule 7


State 15

	ContractDefinition -> contract ident "{" . ContractPart "}"    (rule 8)

	"function"     shift, and enter state 20
	ident          shift, and enter state 21

	ContractPart   goto state 16
	FunctionDefinitiongoto state 17
	StateVariableDeclarationgoto state 18
	TypeName       goto state 19

State 16

	ContractDefinition -> contract ident "{" ContractPart . "}"    (rule 8)

	"}"            shift, and enter state 24


State 17

	ContractPart -> FunctionDefinition .                (rule 12)

	"}"            reduce using rule 12


State 18

	ContractPart -> StateVariableDeclaration .          (rule 11)

	"}"            reduce using rule 11


State 19

	StateVariableDeclaration -> TypeName . "public" ident ";"    (rule 16)

	"public"       shift, and enter state 23


State 20

	FunctionDefinition -> "function" . ident Parameter ";"    (rule 13)

	ident          shift, and enter state 22


State 21

	TypeName -> ident .                                 (rule 17)

	"public"       reduce using rule 17


State 22

	FunctionDefinition -> "function" ident . Parameter ";"    (rule 13)

	ident          shift, and enter state 27

	Parameter      goto state 26

State 23

	StateVariableDeclaration -> TypeName "public" . ident ";"    (rule 16)

	ident          shift, and enter state 25


State 24

	ContractDefinition -> contract ident "{" ContractPart "}" .    (rule 8)

	"pragma"       reduce using rule 8
	"import"       reduce using rule 8
	contract       reduce using rule 8
	%eof           reduce using rule 8


State 25

	StateVariableDeclaration -> TypeName "public" ident . ";"    (rule 16)

	";"            shift, and enter state 29


State 26

	FunctionDefinition -> "function" ident Parameter . ";"    (rule 13)

	";"            shift, and enter state 28


State 27

	Parameter -> ident .                                (rule 15)

	";"            reduce using rule 15


State 28

	FunctionDefinition -> "function" ident Parameter ";" .    (rule 13)

	"}"            reduce using rule 13


State 29

	StateVariableDeclaration -> TypeName "public" ident ";" .    (rule 16)

	"}"            reduce using rule 16


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 18
Number of terminals: 37
Number of non-terminals: 13
Number of states: 30
