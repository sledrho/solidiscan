-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from parser.y
-----------------------------------------------------------------------------


rule 21 is unused
rule 22 is unused
rule 46 is unused
rule 47 is unused
rule 54 is unused
rule 55 is unused
rule 82 is unused
rule 83 is unused

terminal "reservedid" is unused
terminal "exponent" is unused
terminal "int" is unused
terminal "^" is unused
terminal "!" is unused
terminal "&&" is unused
terminal "||" is unused
terminal "!=" is unused
terminal "<" is unused
terminal ">" is unused
terminal "<=" is unused
terminal ">=" is unused
terminal "==" is unused
terminal "[" is unused
terminal "]" is unused
terminal "." is unused
terminal "/" is unused
terminal "**" is unused
terminal "%" is unused
terminal op is unused
terminal "-" is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_solidiscan -> SourceUnit                    (0)
	SourceUnit ->                                      (1)
	SourceUnit -> SourceUnit SourceUnitSol             (2)
	SourceUnitSol -> PragmaDirective                   (3)
	SourceUnitSol -> ImportDirective                   (4)
	SourceUnitSol -> ContractDefinition                (5)
	PragmaDirective -> "pragma" PragmaName version ";"   (6)
	PragmaName -> ident                                (7)
	ImportDirective -> "import" stringLiteral ImportAs ";"   (8)
	ImportDirective -> "import" ImportAster ImportAs "from" stringLiteral ";"   (9)
	ImportAs -> "as" ident                             (10)
	ImportAs ->                                        (11)
	ImportAster -> "*"                                 (12)
	ImportAster -> ident                               (13)
	ContractDefinition -> ConLibInt ident zero(InheritanceSpecList) "{" list(ContractPart) "}"   (14)
	ConLibInt -> contract                              (15)
	ConLibInt -> "library"                             (16)
	ConLibInt -> "interface"                           (17)
	InheritanceSpecList -> "is" InheritanceSpecifier list(OMInheritanceSpec)   (18)
	OMInheritanceSpec -> "," InheritanceSpecifier      (19)
	InheritanceSpecifier -> UserDefinedTypeName        (20)
	InhExpList -> "(" Expression multi(CSExpList) ")"   (21)
	CSExpList -> "," Expression                        (22)
	ContractPart -> StateVarDec                        (23)
	ContractPart -> FunctionDefinition                 (24)
	ContractPart -> UsingForDec                        (25)
	FunctionDefinition -> function ident ParameterList multi(FuncMods) ";"   (26)
	ParameterList -> "(" zero(Parameters) ")"          (27)
	Parameters -> Parameter list(ParamList)            (28)
	ParamList -> "," Parameter                         (29)
	Parameter -> TypeName                              (30)
	FuncMods -> ModifierInvocation                     (31)
	FuncMods -> StateMutability                        (32)
	FuncMods -> FuncVar                                (33)
	ModifierInvocation -> ident "(" list(ModExpList) ")"   (34)
	ModExpList -> ExpressionList                       (35)
	StateMutability -> "pure"                          (36)
	StateMutability -> "constant"                      (37)
	StateMutability -> "view"                          (38)
	StateMutability -> "payable"                       (39)
	FuncVar -> "external"                              (40)
	FuncVar -> "internal"                              (41)
	FuncVar -> "private"                               (42)
	FuncVar -> "public"                                (43)
	StateVarDec -> TypeName zero(AssVar) ident zero(MExpression) ";"   (44)
	UsingForDec -> "using" ident "for" TypeName ";"    (45)
	MTypeName -> "*"                                   (46)
	MTypeName -> TypeName                              (47)
	TypeName -> ElementaryTypeName                     (48)
	TypeName -> UserDefinedTypeName                    (49)
	AssVar -> "public"                                 (50)
	AssVar -> "private"                                (51)
	AssVar -> "internal"                               (52)
	AssVar -> "constant"                               (53)
	MaybeExp -> MExpression                            (54)
	MaybeExp ->                                        (55)
	MExpression -> "=" Expression                      (56)
	ExpressionList -> Expression list(ExprList)        (57)
	ExprList -> "," Expression                         (58)
	Expression -> PrimaryExpression                    (59)
	PrimaryExpression -> BooleanLiteral                (60)
	PrimaryExpression -> NumberLiteral                 (61)
	PrimaryExpression -> stringLiteral                 (62)
	PrimaryExpression -> ident                         (63)
	BooleanLiteral -> "true"                           (64)
	BooleanLiteral -> "false"                          (65)
	NumberLiteral -> "decimalnum" numberunit           (66)
	UserDefinedTypeName -> ident                       (67)
	ElementaryTypeName -> "address"                    (68)
	ElementaryTypeName -> "bool"                       (69)
	ElementaryTypeName -> "var"                        (70)
	ElementaryTypeName -> "string"                     (71)
	list(ContractPart) -> list1(ContractPart)          (72)
	list(ContractPart) ->                              (73)
	list(ExprList) -> list1(ExprList)                  (74)
	list(ExprList) ->                                  (75)
	list(ModExpList) -> list1(ModExpList)              (76)
	list(ModExpList) ->                                (77)
	list(OMInheritanceSpec) -> list1(OMInheritanceSpec)   (78)
	list(OMInheritanceSpec) ->                         (79)
	list(ParamList) -> list1(ParamList)                (80)
	list(ParamList) ->                                 (81)
	multi(CSExpList) -> CSExpList                      (82)
	multi(CSExpList) -> CSExpList multi(CSExpList)     (83)
	multi(FuncMods) -> FuncMods                        (84)
	multi(FuncMods) -> FuncMods multi(FuncMods)        (85)
	zero(AssVar) -> AssVar                             (86)
	zero(AssVar) ->                                    (87)
	zero(InheritanceSpecList) -> InheritanceSpecList   (88)
	zero(InheritanceSpecList) ->                       (89)
	zero(MExpression) -> MExpression                   (90)
	zero(MExpression) ->                               (91)
	zero(Parameters) -> Parameters                     (92)
	zero(Parameters) ->                                (93)
	list1(ContractPart) -> ContractPart                (94)
	list1(ContractPart) -> ContractPart list1(ContractPart)   (95)
	list1(ExprList) -> ExprList                        (96)
	list1(ExprList) -> ExprList list1(ExprList)        (97)
	list1(ModExpList) -> ModExpList                    (98)
	list1(ModExpList) -> ModExpList list1(ModExpList)   (99)
	list1(OMInheritanceSpec) -> OMInheritanceSpec      (100)
	list1(OMInheritanceSpec) -> OMInheritanceSpec list1(OMInheritanceSpec)   (101)
	list1(ParamList) -> ParamList                      (102)
	list1(ParamList) -> ParamList list1(ParamList)     (103)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"reservedid"   { TReservedOp _ }
	version        { TVers _ }
	"decimalnum"   { TDec _ $$ }
	"exponent"     { TExp _ $$ }
	"int"          { TInt _ $$ }
	numberunit     { TNumUnit _ }
	"pragma"       { TPragma _ }
	"import"       { TImport _ }
	"external"     { TExternal _ $$ }
	"public"       { TPublic _ $$ }
	"internal"     { TIntern _ $$ }
	"private"      { TPriv _ $$ }
	"constant"     { TConst _ $$ }
	"string"       { TStringAs _ $$ }
	contract       { TContract _ }
	"library"      { TLibrary _ }
	"interface"    { TInterface _ }
	function       { TFuncDef _ }
	"address"      { TAddr _ $$ }
	"bool"         { TBooleanLit _ $$ }
	"var"          { TVar _ $$ }
	"using"        { TUsing _ $$ }
	"for"          { TFor _ $$ }
	"true"         { TTrue _ $$ }
	"false"        { TFalse _ $$ }
	"as"           { TAs _ }
	"is"           { TIs _ }
	"from"         { TFrom _ }
	"view"         { TView _ $$ }
	"pure"         { TPure _ $$ }
	"payable"      { TPayable _ $$ }
	"^"            { THat _ }
	"!"            { TNegate _ }
	"&&"           { TAnd _ }
	"||"           { TOr _ }
	"!="           { TInEqual _ }
	"<"            { TLThan _ }
	">"            { TGThan _ }
	"<="           { TLTEq _ }
	">="           { TGTEq _ }
	"=="           { TEquality _ }
	"{"            { TLCurl _ }
	"}"            { TRCurl _ }
	"["            { TLBrack _ }
	"]"            { TRBrack _ }
	"."            { TPeriod _ }
	"="            { TEquals _ }
	"*"            { TMult _ }
	"/"            { TDiv _ }
	"**"           { TExpSym _ }
	"%"            { TModul _ }
	op             { TOp _ $$ }
	"-"            { TSub _ }
	";"            { TSemiCol _ }
	","            { TComma _ }
	ident          { TIdent _ $$ }
	stringLiteral  { TStringLiteral _ $$ }
	"("            { TLeftParen _ }
	")"            { TRightParen _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_solidiscan rule  0
	SourceUnit      rules 1, 2
	SourceUnitSol   rules 3, 4, 5
	PragmaDirective rule  6
	PragmaName      rule  7
	ImportDirective rules 8, 9
	ImportAs        rules 10, 11
	ImportAster     rules 12, 13
	ContractDefinition rule  14
	ConLibInt       rules 15, 16, 17
	InheritanceSpecList rule  18
	OMInheritanceSpec rule  19
	InheritanceSpecifier rule  20
	InhExpList      rule  21
	CSExpList       rule  22
	ContractPart    rules 23, 24, 25
	FunctionDefinition rule  26
	ParameterList   rule  27
	Parameters      rule  28
	ParamList       rule  29
	Parameter       rule  30
	FuncMods        rules 31, 32, 33
	ModifierInvocation rule  34
	ModExpList      rule  35
	StateMutability rules 36, 37, 38, 39
	FuncVar         rules 40, 41, 42, 43
	StateVarDec     rule  44
	UsingForDec     rule  45
	MTypeName       rules 46, 47
	TypeName        rules 48, 49
	AssVar          rules 50, 51, 52, 53
	MaybeExp        rules 54, 55
	MExpression     rule  56
	ExpressionList  rule  57
	ExprList        rule  58
	Expression      rule  59
	PrimaryExpression rules 60, 61, 62, 63
	BooleanLiteral  rules 64, 65
	NumberLiteral   rule  66
	UserDefinedTypeName rule  67
	ElementaryTypeName rules 68, 69, 70, 71
	list(ContractPart) rules 72, 73
	list(ExprList)  rules 74, 75
	list(ModExpList) rules 76, 77
	list(OMInheritanceSpec) rules 78, 79
	list(ParamList) rules 80, 81
	multi(CSExpList) rules 82, 83
	multi(FuncMods) rules 84, 85
	zero(AssVar)    rules 86, 87
	zero(InheritanceSpecList) rules 88, 89
	zero(MExpression) rules 90, 91
	zero(Parameters) rules 92, 93
	list1(ContractPart) rules 94, 95
	list1(ExprList) rules 96, 97
	list1(ModExpList) rules 98, 99
	list1(OMInheritanceSpec) rules 100, 101
	list1(ParamList) rules 102, 103

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"pragma"       reduce using rule 1
	"import"       reduce using rule 1
	contract       reduce using rule 1
	"library"      reduce using rule 1
	"interface"    reduce using rule 1
	%eof           reduce using rule 1

	SourceUnit     goto state 2

State 1




State 2

	%start_solidiscan -> SourceUnit .                   (rule 0)
	SourceUnit -> SourceUnit . SourceUnitSol            (rule 2)

	"pragma"       shift, and enter state 8
	"import"       shift, and enter state 9
	contract       shift, and enter state 10
	"library"      shift, and enter state 11
	"interface"    shift, and enter state 12
	%eof           accept

	SourceUnitSol  goto state 3
	PragmaDirectivegoto state 4
	ImportDirectivegoto state 5
	ContractDefinitiongoto state 6
	ConLibInt      goto state 7

State 3

	SourceUnit -> SourceUnit SourceUnitSol .            (rule 2)

	"pragma"       reduce using rule 2
	"import"       reduce using rule 2
	contract       reduce using rule 2
	"library"      reduce using rule 2
	"interface"    reduce using rule 2
	%eof           reduce using rule 2


State 4

	SourceUnitSol -> PragmaDirective .                  (rule 3)

	"pragma"       reduce using rule 3
	"import"       reduce using rule 3
	contract       reduce using rule 3
	"library"      reduce using rule 3
	"interface"    reduce using rule 3
	%eof           reduce using rule 3


State 5

	SourceUnitSol -> ImportDirective .                  (rule 4)

	"pragma"       reduce using rule 4
	"import"       reduce using rule 4
	contract       reduce using rule 4
	"library"      reduce using rule 4
	"interface"    reduce using rule 4
	%eof           reduce using rule 4


State 6

	SourceUnitSol -> ContractDefinition .               (rule 5)

	"pragma"       reduce using rule 5
	"import"       reduce using rule 5
	contract       reduce using rule 5
	"library"      reduce using rule 5
	"interface"    reduce using rule 5
	%eof           reduce using rule 5


State 7

	ContractDefinition -> ConLibInt . ident zero(InheritanceSpecList) "{" list(ContractPart) "}"    (rule 14)

	ident          shift, and enter state 19


State 8

	PragmaDirective -> "pragma" . PragmaName version ";"    (rule 6)

	ident          shift, and enter state 18

	PragmaName     goto state 17

State 9

	ImportDirective -> "import" . stringLiteral ImportAs ";"    (rule 8)
	ImportDirective -> "import" . ImportAster ImportAs "from" stringLiteral ";"    (rule 9)

	"*"            shift, and enter state 14
	ident          shift, and enter state 15
	stringLiteral  shift, and enter state 16

	ImportAster    goto state 13

State 10

	ConLibInt -> contract .                             (rule 15)

	ident          reduce using rule 15


State 11

	ConLibInt -> "library" .                            (rule 16)

	ident          reduce using rule 16


State 12

	ConLibInt -> "interface" .                          (rule 17)

	ident          reduce using rule 17


State 13

	ImportDirective -> "import" ImportAster . ImportAs "from" stringLiteral ";"    (rule 9)

	"as"           shift, and enter state 25
	"from"         reduce using rule 11

	ImportAs       goto state 26

State 14

	ImportAster -> "*" .                                (rule 12)

	"as"           reduce using rule 12
	"from"         reduce using rule 12


State 15

	ImportAster -> ident .                              (rule 13)

	"as"           reduce using rule 13
	"from"         reduce using rule 13


State 16

	ImportDirective -> "import" stringLiteral . ImportAs ";"    (rule 8)

	"as"           shift, and enter state 25
	";"            reduce using rule 11

	ImportAs       goto state 24

State 17

	PragmaDirective -> "pragma" PragmaName . version ";"    (rule 6)

	version        shift, and enter state 23


State 18

	PragmaName -> ident .                               (rule 7)

	version        reduce using rule 7


State 19

	ContractDefinition -> ConLibInt ident . zero(InheritanceSpecList) "{" list(ContractPart) "}"    (rule 14)

	"is"           shift, and enter state 22
	"{"            reduce using rule 89

	InheritanceSpecListgoto state 20
	zero(InheritanceSpecList)goto state 21

State 20

	zero(InheritanceSpecList) -> InheritanceSpecList .    (rule 88)

	"{"            reduce using rule 88


State 21

	ContractDefinition -> ConLibInt ident zero(InheritanceSpecList) . "{" list(ContractPart) "}"    (rule 14)

	"{"            shift, and enter state 34


State 22

	InheritanceSpecList -> "is" . InheritanceSpecifier list(OMInheritanceSpec)    (rule 18)

	ident          shift, and enter state 33

	InheritanceSpecifiergoto state 31
	UserDefinedTypeNamegoto state 32

State 23

	PragmaDirective -> "pragma" PragmaName version . ";"    (rule 6)

	";"            shift, and enter state 30


State 24

	ImportDirective -> "import" stringLiteral ImportAs . ";"    (rule 8)

	";"            shift, and enter state 29


State 25

	ImportAs -> "as" . ident                            (rule 10)

	ident          shift, and enter state 28


State 26

	ImportDirective -> "import" ImportAster ImportAs . "from" stringLiteral ";"    (rule 9)

	"from"         shift, and enter state 27


State 27

	ImportDirective -> "import" ImportAster ImportAs "from" . stringLiteral ";"    (rule 9)

	stringLiteral  shift, and enter state 54


State 28

	ImportAs -> "as" ident .                            (rule 10)

	"from"         reduce using rule 10
	";"            reduce using rule 10


State 29

	ImportDirective -> "import" stringLiteral ImportAs ";" .    (rule 8)

	"pragma"       reduce using rule 8
	"import"       reduce using rule 8
	contract       reduce using rule 8
	"library"      reduce using rule 8
	"interface"    reduce using rule 8
	%eof           reduce using rule 8


State 30

	PragmaDirective -> "pragma" PragmaName version ";" .    (rule 6)

	"pragma"       reduce using rule 6
	"import"       reduce using rule 6
	contract       reduce using rule 6
	"library"      reduce using rule 6
	"interface"    reduce using rule 6
	%eof           reduce using rule 6


State 31

	InheritanceSpecList -> "is" InheritanceSpecifier . list(OMInheritanceSpec)    (rule 18)

	"{"            reduce using rule 79
	","            shift, and enter state 53

	OMInheritanceSpecgoto state 50
	list(OMInheritanceSpec)goto state 51
	list1(OMInheritanceSpec)goto state 52

State 32

	InheritanceSpecifier -> UserDefinedTypeName .       (rule 20)

	"{"            reduce using rule 20
	","            reduce using rule 20


State 33

	UserDefinedTypeName -> ident .                      (rule 67)

	"public"       reduce using rule 67
	"internal"     reduce using rule 67
	"private"      reduce using rule 67
	"constant"     reduce using rule 67
	"{"            reduce using rule 67
	";"            reduce using rule 67
	","            reduce using rule 67
	ident          reduce using rule 67
	")"            reduce using rule 67


State 34

	ContractDefinition -> ConLibInt ident zero(InheritanceSpecList) "{" . list(ContractPart) "}"    (rule 14)

	"string"       shift, and enter state 44
	function       shift, and enter state 45
	"address"      shift, and enter state 46
	"bool"         shift, and enter state 47
	"var"          shift, and enter state 48
	"using"        shift, and enter state 49
	"}"            reduce using rule 73
	ident          shift, and enter state 33

	ContractPart   goto state 35
	FunctionDefinitiongoto state 36
	StateVarDec    goto state 37
	UsingForDec    goto state 38
	TypeName       goto state 39
	UserDefinedTypeNamegoto state 40
	ElementaryTypeNamegoto state 41
	list(ContractPart)goto state 42
	list1(ContractPart)goto state 43

State 35

	list1(ContractPart) -> ContractPart .               (rule 94)
	list1(ContractPart) -> ContractPart . list1(ContractPart)    (rule 95)

	"string"       shift, and enter state 44
	function       shift, and enter state 45
	"address"      shift, and enter state 46
	"bool"         shift, and enter state 47
	"var"          shift, and enter state 48
	"using"        shift, and enter state 49
	"}"            reduce using rule 94
	ident          shift, and enter state 33

	ContractPart   goto state 35
	FunctionDefinitiongoto state 36
	StateVarDec    goto state 37
	UsingForDec    goto state 38
	TypeName       goto state 39
	UserDefinedTypeNamegoto state 40
	ElementaryTypeNamegoto state 41
	list1(ContractPart)goto state 67

State 36

	ContractPart -> FunctionDefinition .                (rule 24)

	"string"       reduce using rule 24
	function       reduce using rule 24
	"address"      reduce using rule 24
	"bool"         reduce using rule 24
	"var"          reduce using rule 24
	"using"        reduce using rule 24
	"}"            reduce using rule 24
	ident          reduce using rule 24


State 37

	ContractPart -> StateVarDec .                       (rule 23)

	"string"       reduce using rule 23
	function       reduce using rule 23
	"address"      reduce using rule 23
	"bool"         reduce using rule 23
	"var"          reduce using rule 23
	"using"        reduce using rule 23
	"}"            reduce using rule 23
	ident          reduce using rule 23


State 38

	ContractPart -> UsingForDec .                       (rule 25)

	"string"       reduce using rule 25
	function       reduce using rule 25
	"address"      reduce using rule 25
	"bool"         reduce using rule 25
	"var"          reduce using rule 25
	"using"        reduce using rule 25
	"}"            reduce using rule 25
	ident          reduce using rule 25


State 39

	StateVarDec -> TypeName . zero(AssVar) ident zero(MExpression) ";"    (rule 44)

	"public"       shift, and enter state 63
	"internal"     shift, and enter state 64
	"private"      shift, and enter state 65
	"constant"     shift, and enter state 66
	ident          reduce using rule 87

	AssVar         goto state 61
	zero(AssVar)   goto state 62

State 40

	TypeName -> UserDefinedTypeName .                   (rule 49)

	"public"       reduce using rule 49
	"internal"     reduce using rule 49
	"private"      reduce using rule 49
	"constant"     reduce using rule 49
	";"            reduce using rule 49
	","            reduce using rule 49
	ident          reduce using rule 49
	")"            reduce using rule 49


State 41

	TypeName -> ElementaryTypeName .                    (rule 48)

	"public"       reduce using rule 48
	"internal"     reduce using rule 48
	"private"      reduce using rule 48
	"constant"     reduce using rule 48
	";"            reduce using rule 48
	","            reduce using rule 48
	ident          reduce using rule 48
	")"            reduce using rule 48


State 42

	ContractDefinition -> ConLibInt ident zero(InheritanceSpecList) "{" list(ContractPart) . "}"    (rule 14)

	"}"            shift, and enter state 60


State 43

	list(ContractPart) -> list1(ContractPart) .         (rule 72)

	"}"            reduce using rule 72


State 44

	ElementaryTypeName -> "string" .                    (rule 71)

	"public"       reduce using rule 71
	"internal"     reduce using rule 71
	"private"      reduce using rule 71
	"constant"     reduce using rule 71
	";"            reduce using rule 71
	","            reduce using rule 71
	ident          reduce using rule 71
	")"            reduce using rule 71


State 45

	FunctionDefinition -> function . ident ParameterList multi(FuncMods) ";"    (rule 26)

	ident          shift, and enter state 59


State 46

	ElementaryTypeName -> "address" .                   (rule 68)

	"public"       reduce using rule 68
	"internal"     reduce using rule 68
	"private"      reduce using rule 68
	"constant"     reduce using rule 68
	";"            reduce using rule 68
	","            reduce using rule 68
	ident          reduce using rule 68
	")"            reduce using rule 68


State 47

	ElementaryTypeName -> "bool" .                      (rule 69)

	"public"       reduce using rule 69
	"internal"     reduce using rule 69
	"private"      reduce using rule 69
	"constant"     reduce using rule 69
	";"            reduce using rule 69
	","            reduce using rule 69
	ident          reduce using rule 69
	")"            reduce using rule 69


State 48

	ElementaryTypeName -> "var" .                       (rule 70)

	"public"       reduce using rule 70
	"internal"     reduce using rule 70
	"private"      reduce using rule 70
	"constant"     reduce using rule 70
	";"            reduce using rule 70
	","            reduce using rule 70
	ident          reduce using rule 70
	")"            reduce using rule 70


State 49

	UsingForDec -> "using" . ident "for" TypeName ";"    (rule 45)

	ident          shift, and enter state 58


State 50

	list1(OMInheritanceSpec) -> OMInheritanceSpec .     (rule 100)
	list1(OMInheritanceSpec) -> OMInheritanceSpec . list1(OMInheritanceSpec)    (rule 101)

	"{"            reduce using rule 100
	","            shift, and enter state 53

	OMInheritanceSpecgoto state 50
	list1(OMInheritanceSpec)goto state 57

State 51

	InheritanceSpecList -> "is" InheritanceSpecifier list(OMInheritanceSpec) .    (rule 18)

	"{"            reduce using rule 18


State 52

	list(OMInheritanceSpec) -> list1(OMInheritanceSpec) .    (rule 78)

	"{"            reduce using rule 78


State 53

	OMInheritanceSpec -> "," . InheritanceSpecifier     (rule 19)

	ident          shift, and enter state 33

	InheritanceSpecifiergoto state 56
	UserDefinedTypeNamegoto state 32

State 54

	ImportDirective -> "import" ImportAster ImportAs "from" stringLiteral . ";"    (rule 9)

	";"            shift, and enter state 55


State 55

	ImportDirective -> "import" ImportAster ImportAs "from" stringLiteral ";" .    (rule 9)

	"pragma"       reduce using rule 9
	"import"       reduce using rule 9
	contract       reduce using rule 9
	"library"      reduce using rule 9
	"interface"    reduce using rule 9
	%eof           reduce using rule 9


State 56

	OMInheritanceSpec -> "," InheritanceSpecifier .     (rule 19)

	"{"            reduce using rule 19
	","            reduce using rule 19


State 57

	list1(OMInheritanceSpec) -> OMInheritanceSpec list1(OMInheritanceSpec) .    (rule 101)

	"{"            reduce using rule 101


State 58

	UsingForDec -> "using" ident . "for" TypeName ";"    (rule 45)

	"for"          shift, and enter state 71


State 59

	FunctionDefinition -> function ident . ParameterList multi(FuncMods) ";"    (rule 26)

	"("            shift, and enter state 70

	ParameterList  goto state 69

State 60

	ContractDefinition -> ConLibInt ident zero(InheritanceSpecList) "{" list(ContractPart) "}" .    (rule 14)

	"pragma"       reduce using rule 14
	"import"       reduce using rule 14
	contract       reduce using rule 14
	"library"      reduce using rule 14
	"interface"    reduce using rule 14
	%eof           reduce using rule 14


State 61

	zero(AssVar) -> AssVar .                            (rule 86)

	ident          reduce using rule 86


State 62

	StateVarDec -> TypeName zero(AssVar) . ident zero(MExpression) ";"    (rule 44)

	ident          shift, and enter state 68


State 63

	AssVar -> "public" .                                (rule 50)

	ident          reduce using rule 50


State 64

	AssVar -> "internal" .                              (rule 52)

	ident          reduce using rule 52


State 65

	AssVar -> "private" .                               (rule 51)

	ident          reduce using rule 51


State 66

	AssVar -> "constant" .                              (rule 53)

	ident          reduce using rule 53


State 67

	list1(ContractPart) -> ContractPart list1(ContractPart) .    (rule 95)

	"}"            reduce using rule 95


State 68

	StateVarDec -> TypeName zero(AssVar) ident . zero(MExpression) ";"    (rule 44)

	"="            shift, and enter state 93
	";"            reduce using rule 91

	MExpression    goto state 91
	zero(MExpression)goto state 92

State 69

	FunctionDefinition -> function ident ParameterList . multi(FuncMods) ";"    (rule 26)

	"external"     shift, and enter state 82
	"public"       shift, and enter state 83
	"internal"     shift, and enter state 84
	"private"      shift, and enter state 85
	"constant"     shift, and enter state 86
	"view"         shift, and enter state 87
	"pure"         shift, and enter state 88
	"payable"      shift, and enter state 89
	ident          shift, and enter state 90

	FuncMods       goto state 77
	ModifierInvocationgoto state 78
	StateMutabilitygoto state 79
	FuncVar        goto state 80
	multi(FuncMods)goto state 81

State 70

	ParameterList -> "(" . zero(Parameters) ")"         (rule 27)

	"string"       shift, and enter state 44
	"address"      shift, and enter state 46
	"bool"         shift, and enter state 47
	"var"          shift, and enter state 48
	ident          shift, and enter state 33
	")"            reduce using rule 93

	Parameters     goto state 73
	Parameter      goto state 74
	TypeName       goto state 75
	UserDefinedTypeNamegoto state 40
	ElementaryTypeNamegoto state 41
	zero(Parameters)goto state 76

State 71

	UsingForDec -> "using" ident "for" . TypeName ";"    (rule 45)

	"string"       shift, and enter state 44
	"address"      shift, and enter state 46
	"bool"         shift, and enter state 47
	"var"          shift, and enter state 48
	ident          shift, and enter state 33

	TypeName       goto state 72
	UserDefinedTypeNamegoto state 40
	ElementaryTypeNamegoto state 41

State 72

	UsingForDec -> "using" ident "for" TypeName . ";"    (rule 45)

	";"            shift, and enter state 112


State 73

	zero(Parameters) -> Parameters .                    (rule 92)

	")"            reduce using rule 92


State 74

	Parameters -> Parameter . list(ParamList)           (rule 28)

	","            shift, and enter state 111
	")"            reduce using rule 81

	ParamList      goto state 108
	list(ParamList)goto state 109
	list1(ParamList)goto state 110

State 75

	Parameter -> TypeName .                             (rule 30)

	","            reduce using rule 30
	")"            reduce using rule 30


State 76

	ParameterList -> "(" zero(Parameters) . ")"         (rule 27)

	")"            shift, and enter state 107


State 77

	multi(FuncMods) -> FuncMods .                       (rule 84)
	multi(FuncMods) -> FuncMods . multi(FuncMods)       (rule 85)

	"external"     shift, and enter state 82
	"public"       shift, and enter state 83
	"internal"     shift, and enter state 84
	"private"      shift, and enter state 85
	"constant"     shift, and enter state 86
	"view"         shift, and enter state 87
	"pure"         shift, and enter state 88
	"payable"      shift, and enter state 89
	";"            reduce using rule 84
	ident          shift, and enter state 90

	FuncMods       goto state 77
	ModifierInvocationgoto state 78
	StateMutabilitygoto state 79
	FuncVar        goto state 80
	multi(FuncMods)goto state 106

State 78

	FuncMods -> ModifierInvocation .                    (rule 31)

	"external"     reduce using rule 31
	"public"       reduce using rule 31
	"internal"     reduce using rule 31
	"private"      reduce using rule 31
	"constant"     reduce using rule 31
	"view"         reduce using rule 31
	"pure"         reduce using rule 31
	"payable"      reduce using rule 31
	";"            reduce using rule 31
	ident          reduce using rule 31


State 79

	FuncMods -> StateMutability .                       (rule 32)

	"external"     reduce using rule 32
	"public"       reduce using rule 32
	"internal"     reduce using rule 32
	"private"      reduce using rule 32
	"constant"     reduce using rule 32
	"view"         reduce using rule 32
	"pure"         reduce using rule 32
	"payable"      reduce using rule 32
	";"            reduce using rule 32
	ident          reduce using rule 32


State 80

	FuncMods -> FuncVar .                               (rule 33)

	"external"     reduce using rule 33
	"public"       reduce using rule 33
	"internal"     reduce using rule 33
	"private"      reduce using rule 33
	"constant"     reduce using rule 33
	"view"         reduce using rule 33
	"pure"         reduce using rule 33
	"payable"      reduce using rule 33
	";"            reduce using rule 33
	ident          reduce using rule 33


State 81

	FunctionDefinition -> function ident ParameterList multi(FuncMods) . ";"    (rule 26)

	";"            shift, and enter state 105


State 82

	FuncVar -> "external" .                             (rule 40)

	"external"     reduce using rule 40
	"public"       reduce using rule 40
	"internal"     reduce using rule 40
	"private"      reduce using rule 40
	"constant"     reduce using rule 40
	"view"         reduce using rule 40
	"pure"         reduce using rule 40
	"payable"      reduce using rule 40
	";"            reduce using rule 40
	ident          reduce using rule 40


State 83

	FuncVar -> "public" .                               (rule 43)

	"external"     reduce using rule 43
	"public"       reduce using rule 43
	"internal"     reduce using rule 43
	"private"      reduce using rule 43
	"constant"     reduce using rule 43
	"view"         reduce using rule 43
	"pure"         reduce using rule 43
	"payable"      reduce using rule 43
	";"            reduce using rule 43
	ident          reduce using rule 43


State 84

	FuncVar -> "internal" .                             (rule 41)

	"external"     reduce using rule 41
	"public"       reduce using rule 41
	"internal"     reduce using rule 41
	"private"      reduce using rule 41
	"constant"     reduce using rule 41
	"view"         reduce using rule 41
	"pure"         reduce using rule 41
	"payable"      reduce using rule 41
	";"            reduce using rule 41
	ident          reduce using rule 41


State 85

	FuncVar -> "private" .                              (rule 42)

	"external"     reduce using rule 42
	"public"       reduce using rule 42
	"internal"     reduce using rule 42
	"private"      reduce using rule 42
	"constant"     reduce using rule 42
	"view"         reduce using rule 42
	"pure"         reduce using rule 42
	"payable"      reduce using rule 42
	";"            reduce using rule 42
	ident          reduce using rule 42


State 86

	StateMutability -> "constant" .                     (rule 37)

	"external"     reduce using rule 37
	"public"       reduce using rule 37
	"internal"     reduce using rule 37
	"private"      reduce using rule 37
	"constant"     reduce using rule 37
	"view"         reduce using rule 37
	"pure"         reduce using rule 37
	"payable"      reduce using rule 37
	";"            reduce using rule 37
	ident          reduce using rule 37


State 87

	StateMutability -> "view" .                         (rule 38)

	"external"     reduce using rule 38
	"public"       reduce using rule 38
	"internal"     reduce using rule 38
	"private"      reduce using rule 38
	"constant"     reduce using rule 38
	"view"         reduce using rule 38
	"pure"         reduce using rule 38
	"payable"      reduce using rule 38
	";"            reduce using rule 38
	ident          reduce using rule 38


State 88

	StateMutability -> "pure" .                         (rule 36)

	"external"     reduce using rule 36
	"public"       reduce using rule 36
	"internal"     reduce using rule 36
	"private"      reduce using rule 36
	"constant"     reduce using rule 36
	"view"         reduce using rule 36
	"pure"         reduce using rule 36
	"payable"      reduce using rule 36
	";"            reduce using rule 36
	ident          reduce using rule 36


State 89

	StateMutability -> "payable" .                      (rule 39)

	"external"     reduce using rule 39
	"public"       reduce using rule 39
	"internal"     reduce using rule 39
	"private"      reduce using rule 39
	"constant"     reduce using rule 39
	"view"         reduce using rule 39
	"pure"         reduce using rule 39
	"payable"      reduce using rule 39
	";"            reduce using rule 39
	ident          reduce using rule 39


State 90

	ModifierInvocation -> ident . "(" list(ModExpList) ")"    (rule 34)

	"("            shift, and enter state 104


State 91

	zero(MExpression) -> MExpression .                  (rule 90)

	";"            reduce using rule 90


State 92

	StateVarDec -> TypeName zero(AssVar) ident zero(MExpression) . ";"    (rule 44)

	";"            shift, and enter state 103


State 93

	MExpression -> "=" . Expression                     (rule 56)

	"decimalnum"   shift, and enter state 98
	"true"         shift, and enter state 99
	"false"        shift, and enter state 100
	ident          shift, and enter state 101
	stringLiteral  shift, and enter state 102

	Expression     goto state 94
	PrimaryExpressiongoto state 95
	BooleanLiteral goto state 96
	NumberLiteral  goto state 97

State 94

	MExpression -> "=" Expression .                     (rule 56)

	";"            reduce using rule 56


State 95

	Expression -> PrimaryExpression .                   (rule 59)

	"decimalnum"   reduce using rule 59
	"true"         reduce using rule 59
	"false"        reduce using rule 59
	";"            reduce using rule 59
	","            reduce using rule 59
	ident          reduce using rule 59
	stringLiteral  reduce using rule 59
	")"            reduce using rule 59


State 96

	PrimaryExpression -> BooleanLiteral .               (rule 60)

	"decimalnum"   reduce using rule 60
	"true"         reduce using rule 60
	"false"        reduce using rule 60
	";"            reduce using rule 60
	","            reduce using rule 60
	ident          reduce using rule 60
	stringLiteral  reduce using rule 60
	")"            reduce using rule 60


State 97

	PrimaryExpression -> NumberLiteral .                (rule 61)

	"decimalnum"   reduce using rule 61
	"true"         reduce using rule 61
	"false"        reduce using rule 61
	";"            reduce using rule 61
	","            reduce using rule 61
	ident          reduce using rule 61
	stringLiteral  reduce using rule 61
	")"            reduce using rule 61


State 98

	NumberLiteral -> "decimalnum" . numberunit          (rule 66)

	numberunit     shift, and enter state 120


State 99

	BooleanLiteral -> "true" .                          (rule 64)

	"decimalnum"   reduce using rule 64
	"true"         reduce using rule 64
	"false"        reduce using rule 64
	";"            reduce using rule 64
	","            reduce using rule 64
	ident          reduce using rule 64
	stringLiteral  reduce using rule 64
	")"            reduce using rule 64


State 100

	BooleanLiteral -> "false" .                         (rule 65)

	"decimalnum"   reduce using rule 65
	"true"         reduce using rule 65
	"false"        reduce using rule 65
	";"            reduce using rule 65
	","            reduce using rule 65
	ident          reduce using rule 65
	stringLiteral  reduce using rule 65
	")"            reduce using rule 65


State 101

	PrimaryExpression -> ident .                        (rule 63)

	"decimalnum"   reduce using rule 63
	"true"         reduce using rule 63
	"false"        reduce using rule 63
	";"            reduce using rule 63
	","            reduce using rule 63
	ident          reduce using rule 63
	stringLiteral  reduce using rule 63
	")"            reduce using rule 63


State 102

	PrimaryExpression -> stringLiteral .                (rule 62)

	"decimalnum"   reduce using rule 62
	"true"         reduce using rule 62
	"false"        reduce using rule 62
	";"            reduce using rule 62
	","            reduce using rule 62
	ident          reduce using rule 62
	stringLiteral  reduce using rule 62
	")"            reduce using rule 62


State 103

	StateVarDec -> TypeName zero(AssVar) ident zero(MExpression) ";" .    (rule 44)

	"string"       reduce using rule 44
	function       reduce using rule 44
	"address"      reduce using rule 44
	"bool"         reduce using rule 44
	"var"          reduce using rule 44
	"using"        reduce using rule 44
	"}"            reduce using rule 44
	ident          reduce using rule 44


State 104

	ModifierInvocation -> ident "(" . list(ModExpList) ")"    (rule 34)

	"decimalnum"   shift, and enter state 98
	"true"         shift, and enter state 99
	"false"        shift, and enter state 100
	ident          shift, and enter state 101
	stringLiteral  shift, and enter state 102
	")"            reduce using rule 77

	ModExpList     goto state 115
	ExpressionList goto state 116
	Expression     goto state 117
	PrimaryExpressiongoto state 95
	BooleanLiteral goto state 96
	NumberLiteral  goto state 97
	list(ModExpList)goto state 118
	list1(ModExpList)goto state 119

State 105

	FunctionDefinition -> function ident ParameterList multi(FuncMods) ";" .    (rule 26)

	"string"       reduce using rule 26
	function       reduce using rule 26
	"address"      reduce using rule 26
	"bool"         reduce using rule 26
	"var"          reduce using rule 26
	"using"        reduce using rule 26
	"}"            reduce using rule 26
	ident          reduce using rule 26


State 106

	multi(FuncMods) -> FuncMods multi(FuncMods) .       (rule 85)

	";"            reduce using rule 85


State 107

	ParameterList -> "(" zero(Parameters) ")" .         (rule 27)

	"external"     reduce using rule 27
	"public"       reduce using rule 27
	"internal"     reduce using rule 27
	"private"      reduce using rule 27
	"constant"     reduce using rule 27
	"view"         reduce using rule 27
	"pure"         reduce using rule 27
	"payable"      reduce using rule 27
	ident          reduce using rule 27


State 108

	list1(ParamList) -> ParamList .                     (rule 102)
	list1(ParamList) -> ParamList . list1(ParamList)    (rule 103)

	","            shift, and enter state 111
	")"            reduce using rule 102

	ParamList      goto state 108
	list1(ParamList)goto state 114

State 109

	Parameters -> Parameter list(ParamList) .           (rule 28)

	")"            reduce using rule 28


State 110

	list(ParamList) -> list1(ParamList) .               (rule 80)

	")"            reduce using rule 80


State 111

	ParamList -> "," . Parameter                        (rule 29)

	"string"       shift, and enter state 44
	"address"      shift, and enter state 46
	"bool"         shift, and enter state 47
	"var"          shift, and enter state 48
	ident          shift, and enter state 33

	Parameter      goto state 113
	TypeName       goto state 75
	UserDefinedTypeNamegoto state 40
	ElementaryTypeNamegoto state 41

State 112

	UsingForDec -> "using" ident "for" TypeName ";" .    (rule 45)

	"string"       reduce using rule 45
	function       reduce using rule 45
	"address"      reduce using rule 45
	"bool"         reduce using rule 45
	"var"          reduce using rule 45
	"using"        reduce using rule 45
	"}"            reduce using rule 45
	ident          reduce using rule 45


State 113

	ParamList -> "," Parameter .                        (rule 29)

	","            reduce using rule 29
	")"            reduce using rule 29


State 114

	list1(ParamList) -> ParamList list1(ParamList) .    (rule 103)

	")"            reduce using rule 103


State 115

	list1(ModExpList) -> ModExpList .                   (rule 98)
	list1(ModExpList) -> ModExpList . list1(ModExpList)    (rule 99)

	"decimalnum"   shift, and enter state 98
	"true"         shift, and enter state 99
	"false"        shift, and enter state 100
	ident          shift, and enter state 101
	stringLiteral  shift, and enter state 102
	")"            reduce using rule 98

	ModExpList     goto state 115
	ExpressionList goto state 116
	Expression     goto state 117
	PrimaryExpressiongoto state 95
	BooleanLiteral goto state 96
	NumberLiteral  goto state 97
	list1(ModExpList)goto state 126

State 116

	ModExpList -> ExpressionList .                      (rule 35)

	"decimalnum"   reduce using rule 35
	"true"         reduce using rule 35
	"false"        reduce using rule 35
	ident          reduce using rule 35
	stringLiteral  reduce using rule 35
	")"            reduce using rule 35


State 117

	ExpressionList -> Expression . list(ExprList)       (rule 57)

	"decimalnum"   reduce using rule 75
	"true"         reduce using rule 75
	"false"        reduce using rule 75
	","            shift, and enter state 125
	ident          reduce using rule 75
	stringLiteral  reduce using rule 75
	")"            reduce using rule 75

	ExprList       goto state 122
	list(ExprList) goto state 123
	list1(ExprList)goto state 124

State 118

	ModifierInvocation -> ident "(" list(ModExpList) . ")"    (rule 34)

	")"            shift, and enter state 121


State 119

	list(ModExpList) -> list1(ModExpList) .             (rule 76)

	")"            reduce using rule 76


State 120

	NumberLiteral -> "decimalnum" numberunit .          (rule 66)

	"decimalnum"   reduce using rule 66
	"true"         reduce using rule 66
	"false"        reduce using rule 66
	";"            reduce using rule 66
	","            reduce using rule 66
	ident          reduce using rule 66
	stringLiteral  reduce using rule 66
	")"            reduce using rule 66


State 121

	ModifierInvocation -> ident "(" list(ModExpList) ")" .    (rule 34)

	"external"     reduce using rule 34
	"public"       reduce using rule 34
	"internal"     reduce using rule 34
	"private"      reduce using rule 34
	"constant"     reduce using rule 34
	"view"         reduce using rule 34
	"pure"         reduce using rule 34
	"payable"      reduce using rule 34
	";"            reduce using rule 34
	ident          reduce using rule 34


State 122

	list1(ExprList) -> ExprList .                       (rule 96)
	list1(ExprList) -> ExprList . list1(ExprList)       (rule 97)

	"decimalnum"   reduce using rule 96
	"true"         reduce using rule 96
	"false"        reduce using rule 96
	","            shift, and enter state 125
	ident          reduce using rule 96
	stringLiteral  reduce using rule 96
	")"            reduce using rule 96

	ExprList       goto state 122
	list1(ExprList)goto state 128

State 123

	ExpressionList -> Expression list(ExprList) .       (rule 57)

	"decimalnum"   reduce using rule 57
	"true"         reduce using rule 57
	"false"        reduce using rule 57
	ident          reduce using rule 57
	stringLiteral  reduce using rule 57
	")"            reduce using rule 57


State 124

	list(ExprList) -> list1(ExprList) .                 (rule 74)

	"decimalnum"   reduce using rule 74
	"true"         reduce using rule 74
	"false"        reduce using rule 74
	ident          reduce using rule 74
	stringLiteral  reduce using rule 74
	")"            reduce using rule 74


State 125

	ExprList -> "," . Expression                        (rule 58)

	"decimalnum"   shift, and enter state 98
	"true"         shift, and enter state 99
	"false"        shift, and enter state 100
	ident          shift, and enter state 101
	stringLiteral  shift, and enter state 102

	Expression     goto state 127
	PrimaryExpressiongoto state 95
	BooleanLiteral goto state 96
	NumberLiteral  goto state 97

State 126

	list1(ModExpList) -> ModExpList list1(ModExpList) .    (rule 99)

	")"            reduce using rule 99


State 127

	ExprList -> "," Expression .                        (rule 58)

	"decimalnum"   reduce using rule 58
	"true"         reduce using rule 58
	"false"        reduce using rule 58
	","            reduce using rule 58
	ident          reduce using rule 58
	stringLiteral  reduce using rule 58
	")"            reduce using rule 58


State 128

	list1(ExprList) -> ExprList list1(ExprList) .       (rule 97)

	"decimalnum"   reduce using rule 97
	"true"         reduce using rule 97
	"false"        reduce using rule 97
	ident          reduce using rule 97
	stringLiteral  reduce using rule 97
	")"            reduce using rule 97


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 104
Number of terminals: 59
Number of non-terminals: 57
Number of states: 129
