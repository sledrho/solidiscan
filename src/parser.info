-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from parser.y
-----------------------------------------------------------------------------


rule 21 is unused
rule 22 is unused
rule 60 is unused
rule 61 is unused
rule 68 is unused
rule 69 is unused
rule 80 is unused
rule 81 is unused
rule 110 is unused
rule 111 is unused

terminal "reservedid" is unused
terminal "exponent" is unused
terminal "int" is unused
terminal "if" is unused
terminal "else" is unused
terminal "^" is unused
terminal "!" is unused
terminal "&&" is unused
terminal "||" is unused
terminal "!=" is unused
terminal "<" is unused
terminal ">" is unused
terminal "<=" is unused
terminal ">=" is unused
terminal "==" is unused
terminal "[" is unused
terminal "]" is unused
terminal "." is unused
terminal "/" is unused
terminal "**" is unused
terminal "%" is unused
terminal op is unused
terminal "-" is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_solidiscan -> SourceUnit                    (0)
	SourceUnit ->                                      (1)
	SourceUnit -> SourceUnit SourceUnitSol             (2)
	SourceUnitSol -> PragmaDirective                   (3)
	SourceUnitSol -> ImportDirective                   (4)
	SourceUnitSol -> ContractDefinition                (5)
	PragmaDirective -> "pragma" PragmaName version ";"   (6)
	PragmaName -> ident                                (7)
	ImportDirective -> "import" stringLiteral ImportAs ";"   (8)
	ImportDirective -> "import" ImportAster ImportAs "from" stringLiteral ";"   (9)
	ImportAs -> "as" ident                             (10)
	ImportAs ->                                        (11)
	ImportAster -> "*"                                 (12)
	ImportAster -> ident                               (13)
	ContractDefinition -> ConLibInt ident zero(InheritanceSpecList) "{" list(ContractPart) "}"   (14)
	ConLibInt -> contract                              (15)
	ConLibInt -> "library"                             (16)
	ConLibInt -> "interface"                           (17)
	InheritanceSpecList -> "is" InheritanceSpecifier list(OMInheritanceSpec)   (18)
	OMInheritanceSpec -> "," InheritanceSpecifier      (19)
	InheritanceSpecifier -> UserDefinedTypeName        (20)
	InhExpList -> "(" Expression multi(CSExpList) ")"   (21)
	CSExpList -> "," Expression                        (22)
	ContractPart -> StateVarDec                        (23)
	ContractPart -> UsingForDec                        (24)
	ContractPart -> FunctionDefinition                 (25)
	ContractPart -> EventDefinition                    (26)
	ContractPart -> ModifierDefinition                 (27)
	FunctionDefinition -> function ident ParameterList list(FuncMods) zero(ReturnParam) TermBlock   (28)
	EventDefinition -> "event" ident zero(EventParamList) zero(AnonList) ";"   (29)
	ModifierDefinition -> "modifier" ident zero(ParameterList) TermBlock   (30)
	ModifierInvocation -> ident "(" list(ModExpList) ")"   (31)
	ModExpList -> ExpressionList                       (32)
	EventParamList -> "(" zero(EventParams) ")"        (33)
	EventParams -> EParameters list(EParamList)        (34)
	EParamList -> "," EParameters                      (35)
	EParameters -> TypeName ident                      (36)
	AnonList -> "anonymous"                            (37)
	ParameterList -> "(" zero(Parameters) ")"          (38)
	Parameters -> Parameter list(ParamList)            (39)
	ParamList -> "," Parameter                         (40)
	Parameter -> TypeName zero(StorageLocation) ident   (41)
	FuncMods -> ModifierInvocation                     (42)
	FuncMods -> StateMutability                        (43)
	FuncMods -> FuncVar                                (44)
	ReturnParam -> "returns" ParameterList             (45)
	TermBlock -> ";"                                   (46)
	TermBlock -> "{" list(Statement) "}"               (47)
	StateMutability -> "pure"                          (48)
	StateMutability -> "constant"                      (49)
	StateMutability -> "view"                          (50)
	StateMutability -> "payable"                       (51)
	StorageLocation -> "memory"                        (52)
	StorageLocation -> "storage"                       (53)
	FuncVar -> "external"                              (54)
	FuncVar -> "internal"                              (55)
	FuncVar -> "private"                               (56)
	FuncVar -> "public"                                (57)
	StateVarDec -> TypeName zero(AssVar) ident zero(MExpression) ";"   (58)
	UsingForDec -> "using" ident "for" TypeName ";"    (59)
	MTypeName -> "*"                                   (60)
	MTypeName -> TypeName                              (61)
	TypeName -> ElementaryTypeName                     (62)
	TypeName -> UserDefinedTypeName                    (63)
	AssVar -> "public"                                 (64)
	AssVar -> "private"                                (65)
	AssVar -> "internal"                               (66)
	AssVar -> "constant"                               (67)
	MaybeExp -> MExpression                            (68)
	MaybeExp ->                                        (69)
	MExpression -> "=" Expression                      (70)
	ExpressionList -> Expression list(ExprList)        (71)
	ExprList -> "," Expression                         (72)
	Expression -> PrimaryExpression                    (73)
	Statement -> SimpleStatement ";"                   (74)
	SimpleStatement -> VariableDefinition              (75)
	SimpleStatement -> ExpressionStatement             (76)
	VariableDefinition -> "var" VariableDeclaration    (77)
	VariableDeclaration -> TypeName zero(StorageLocation) ident   (78)
	ExpressionStatement -> Expression                  (79)
	IfStatement -> "if" "(" Expression ")"             (80)
	ElseState -> "else" Statement                      (81)
	PrimaryExpression -> BooleanLiteral                (82)
	PrimaryExpression -> NumberLiteral                 (83)
	PrimaryExpression -> stringLiteral                 (84)
	PrimaryExpression -> ident                         (85)
	BooleanLiteral -> "true"                           (86)
	BooleanLiteral -> "false"                          (87)
	NumberLiteral -> "decimalnum" numberunit           (88)
	UserDefinedTypeName -> ident                       (89)
	ElementaryTypeName -> "address"                    (90)
	ElementaryTypeName -> "bool"                       (91)
	ElementaryTypeName -> "var"                        (92)
	ElementaryTypeName -> "string"                     (93)
	list(ContractPart) -> list1(ContractPart)          (94)
	list(ContractPart) ->                              (95)
	list(EParamList) -> list1(EParamList)              (96)
	list(EParamList) ->                                (97)
	list(ExprList) -> list1(ExprList)                  (98)
	list(ExprList) ->                                  (99)
	list(FuncMods) -> list1(FuncMods)                  (100)
	list(FuncMods) ->                                  (101)
	list(ModExpList) -> list1(ModExpList)              (102)
	list(ModExpList) ->                                (103)
	list(OMInheritanceSpec) -> list1(OMInheritanceSpec)   (104)
	list(OMInheritanceSpec) ->                         (105)
	list(ParamList) -> list1(ParamList)                (106)
	list(ParamList) ->                                 (107)
	list(Statement) -> list1(Statement)                (108)
	list(Statement) ->                                 (109)
	multi(CSExpList) -> CSExpList                      (110)
	multi(CSExpList) -> CSExpList multi(CSExpList)     (111)
	zero(AnonList) -> AnonList                         (112)
	zero(AnonList) ->                                  (113)
	zero(AssVar) -> AssVar                             (114)
	zero(AssVar) ->                                    (115)
	zero(EventParamList) -> EventParamList             (116)
	zero(EventParamList) ->                            (117)
	zero(EventParams) -> EventParams                   (118)
	zero(EventParams) ->                               (119)
	zero(InheritanceSpecList) -> InheritanceSpecList   (120)
	zero(InheritanceSpecList) ->                       (121)
	zero(MExpression) -> MExpression                   (122)
	zero(MExpression) ->                               (123)
	zero(ParameterList) -> ParameterList               (124)
	zero(ParameterList) ->                             (125)
	zero(Parameters) -> Parameters                     (126)
	zero(Parameters) ->                                (127)
	zero(ReturnParam) -> ReturnParam                   (128)
	zero(ReturnParam) ->                               (129)
	zero(StorageLocation) -> StorageLocation           (130)
	zero(StorageLocation) ->                           (131)
	list1(ContractPart) -> ContractPart                (132)
	list1(ContractPart) -> ContractPart list1(ContractPart)   (133)
	list1(EParamList) -> EParamList                    (134)
	list1(EParamList) -> EParamList list1(EParamList)   (135)
	list1(ExprList) -> ExprList                        (136)
	list1(ExprList) -> ExprList list1(ExprList)        (137)
	list1(FuncMods) -> FuncMods                        (138)
	list1(FuncMods) -> FuncMods list1(FuncMods)        (139)
	list1(ModExpList) -> ModExpList                    (140)
	list1(ModExpList) -> ModExpList list1(ModExpList)   (141)
	list1(OMInheritanceSpec) -> OMInheritanceSpec      (142)
	list1(OMInheritanceSpec) -> OMInheritanceSpec list1(OMInheritanceSpec)   (143)
	list1(ParamList) -> ParamList                      (144)
	list1(ParamList) -> ParamList list1(ParamList)     (145)
	list1(Statement) -> Statement                      (146)
	list1(Statement) -> Statement list1(Statement)     (147)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"reservedid"   { TReservedOp _ }
	version        { TVers _ }
	"decimalnum"   { TDec _ $$ }
	"exponent"     { TExp _ $$ }
	"int"          { TInt _ $$ }
	numberunit     { TNumUnit _ }
	"pragma"       { TPragma _ }
	"import"       { TImport _ }
	"external"     { TExternal _ $$ }
	"public"       { TPublic _ $$ }
	"internal"     { TIntern _ $$ }
	"private"      { TPriv _ $$ }
	"constant"     { TConst _ $$ }
	"string"       { TStringAs _ $$ }
	contract       { TContract _ }
	"library"      { TLibrary _ }
	"interface"    { TInterface _ }
	function       { TFuncDef _ }
	"address"      { TAddr _ $$ }
	"bool"         { TBooleanLit _ $$ }
	"var"          { TVar _ $$ }
	"using"        { TUsing _ $$ }
	"for"          { TFor _ $$ }
	"true"         { TTrue _ $$ }
	"false"        { TFalse _ $$ }
	"as"           { TAs _ }
	"is"           { TIs _ }
	"from"         { TFrom _ }
	"view"         { TView _ $$ }
	"pure"         { TPure _ $$ }
	"payable"      { TPayable _ $$ }
	"returns"      { TReturns _ }
	"if"           { TIf _ }
	"else"         { TElse _ }
	"event"        { TEvent _ }
	"anonymous"    { TAnon _ }
	"modifier"     { TModi _ }
	"memory"       { TMem _  $$ }
	"storage"      { TStorage _ $$ }
	"^"            { THat _ }
	"!"            { TNegate _ }
	"&&"           { TAnd _ }
	"||"           { TOr _ }
	"!="           { TInEqual _ }
	"<"            { TLThan _ }
	">"            { TGThan _ }
	"<="           { TLTEq _ }
	">="           { TGTEq _ }
	"=="           { TEquality _ }
	"{"            { TLCurl _ }
	"}"            { TRCurl _ }
	"["            { TLBrack _ }
	"]"            { TRBrack _ }
	"."            { TPeriod _ }
	"="            { TEquals _ }
	"*"            { TMult _ }
	"/"            { TDiv _ }
	"**"           { TExpSym _ }
	"%"            { TModul _ }
	op             { TOp _ $$ }
	"-"            { TSub _ }
	";"            { TSemiCol _ }
	","            { TComma _ }
	ident          { TIdent _ $$ }
	stringLiteral  { TStringLiteral _ $$ }
	"("            { TLeftParen _ }
	")"            { TRightParen _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_solidiscan rule  0
	SourceUnit      rules 1, 2
	SourceUnitSol   rules 3, 4, 5
	PragmaDirective rule  6
	PragmaName      rule  7
	ImportDirective rules 8, 9
	ImportAs        rules 10, 11
	ImportAster     rules 12, 13
	ContractDefinition rule  14
	ConLibInt       rules 15, 16, 17
	InheritanceSpecList rule  18
	OMInheritanceSpec rule  19
	InheritanceSpecifier rule  20
	InhExpList      rule  21
	CSExpList       rule  22
	ContractPart    rules 23, 24, 25, 26, 27
	FunctionDefinition rule  28
	EventDefinition rule  29
	ModifierDefinition rule  30
	ModifierInvocation rule  31
	ModExpList      rule  32
	EventParamList  rule  33
	EventParams     rule  34
	EParamList      rule  35
	EParameters     rule  36
	AnonList        rule  37
	ParameterList   rule  38
	Parameters      rule  39
	ParamList       rule  40
	Parameter       rule  41
	FuncMods        rules 42, 43, 44
	ReturnParam     rule  45
	TermBlock       rules 46, 47
	StateMutability rules 48, 49, 50, 51
	StorageLocation rules 52, 53
	FuncVar         rules 54, 55, 56, 57
	StateVarDec     rule  58
	UsingForDec     rule  59
	MTypeName       rules 60, 61
	TypeName        rules 62, 63
	AssVar          rules 64, 65, 66, 67
	MaybeExp        rules 68, 69
	MExpression     rule  70
	ExpressionList  rule  71
	ExprList        rule  72
	Expression      rule  73
	Statement       rule  74
	SimpleStatement rules 75, 76
	VariableDefinition rule  77
	VariableDeclaration rule  78
	ExpressionStatement rule  79
	IfStatement     rule  80
	ElseState       rule  81
	PrimaryExpression rules 82, 83, 84, 85
	BooleanLiteral  rules 86, 87
	NumberLiteral   rule  88
	UserDefinedTypeName rule  89
	ElementaryTypeName rules 90, 91, 92, 93
	list(ContractPart) rules 94, 95
	list(EParamList) rules 96, 97
	list(ExprList)  rules 98, 99
	list(FuncMods)  rules 100, 101
	list(ModExpList) rules 102, 103
	list(OMInheritanceSpec) rules 104, 105
	list(ParamList) rules 106, 107
	list(Statement) rules 108, 109
	multi(CSExpList) rules 110, 111
	zero(AnonList)  rules 112, 113
	zero(AssVar)    rules 114, 115
	zero(EventParamList) rules 116, 117
	zero(EventParams) rules 118, 119
	zero(InheritanceSpecList) rules 120, 121
	zero(MExpression) rules 122, 123
	zero(ParameterList) rules 124, 125
	zero(Parameters) rules 126, 127
	zero(ReturnParam) rules 128, 129
	zero(StorageLocation) rules 130, 131
	list1(ContractPart) rules 132, 133
	list1(EParamList) rules 134, 135
	list1(ExprList) rules 136, 137
	list1(FuncMods) rules 138, 139
	list1(ModExpList) rules 140, 141
	list1(OMInheritanceSpec) rules 142, 143
	list1(ParamList) rules 144, 145
	list1(Statement) rules 146, 147

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"pragma"       reduce using rule 1
	"import"       reduce using rule 1
	contract       reduce using rule 1
	"library"      reduce using rule 1
	"interface"    reduce using rule 1
	%eof           reduce using rule 1

	SourceUnit     goto state 2

State 1




State 2

	%start_solidiscan -> SourceUnit .                   (rule 0)
	SourceUnit -> SourceUnit . SourceUnitSol            (rule 2)

	"pragma"       shift, and enter state 8
	"import"       shift, and enter state 9
	contract       shift, and enter state 10
	"library"      shift, and enter state 11
	"interface"    shift, and enter state 12
	%eof           accept

	SourceUnitSol  goto state 3
	PragmaDirectivegoto state 4
	ImportDirectivegoto state 5
	ContractDefinitiongoto state 6
	ConLibInt      goto state 7

State 3

	SourceUnit -> SourceUnit SourceUnitSol .            (rule 2)

	"pragma"       reduce using rule 2
	"import"       reduce using rule 2
	contract       reduce using rule 2
	"library"      reduce using rule 2
	"interface"    reduce using rule 2
	%eof           reduce using rule 2


State 4

	SourceUnitSol -> PragmaDirective .                  (rule 3)

	"pragma"       reduce using rule 3
	"import"       reduce using rule 3
	contract       reduce using rule 3
	"library"      reduce using rule 3
	"interface"    reduce using rule 3
	%eof           reduce using rule 3


State 5

	SourceUnitSol -> ImportDirective .                  (rule 4)

	"pragma"       reduce using rule 4
	"import"       reduce using rule 4
	contract       reduce using rule 4
	"library"      reduce using rule 4
	"interface"    reduce using rule 4
	%eof           reduce using rule 4


State 6

	SourceUnitSol -> ContractDefinition .               (rule 5)

	"pragma"       reduce using rule 5
	"import"       reduce using rule 5
	contract       reduce using rule 5
	"library"      reduce using rule 5
	"interface"    reduce using rule 5
	%eof           reduce using rule 5


State 7

	ContractDefinition -> ConLibInt . ident zero(InheritanceSpecList) "{" list(ContractPart) "}"    (rule 14)

	ident          shift, and enter state 19


State 8

	PragmaDirective -> "pragma" . PragmaName version ";"    (rule 6)

	ident          shift, and enter state 18

	PragmaName     goto state 17

State 9

	ImportDirective -> "import" . stringLiteral ImportAs ";"    (rule 8)
	ImportDirective -> "import" . ImportAster ImportAs "from" stringLiteral ";"    (rule 9)

	"*"            shift, and enter state 14
	ident          shift, and enter state 15
	stringLiteral  shift, and enter state 16

	ImportAster    goto state 13

State 10

	ConLibInt -> contract .                             (rule 15)

	ident          reduce using rule 15


State 11

	ConLibInt -> "library" .                            (rule 16)

	ident          reduce using rule 16


State 12

	ConLibInt -> "interface" .                          (rule 17)

	ident          reduce using rule 17


State 13

	ImportDirective -> "import" ImportAster . ImportAs "from" stringLiteral ";"    (rule 9)

	"as"           shift, and enter state 25
	"from"         reduce using rule 11

	ImportAs       goto state 26

State 14

	ImportAster -> "*" .                                (rule 12)

	"as"           reduce using rule 12
	"from"         reduce using rule 12


State 15

	ImportAster -> ident .                              (rule 13)

	"as"           reduce using rule 13
	"from"         reduce using rule 13


State 16

	ImportDirective -> "import" stringLiteral . ImportAs ";"    (rule 8)

	"as"           shift, and enter state 25
	";"            reduce using rule 11

	ImportAs       goto state 24

State 17

	PragmaDirective -> "pragma" PragmaName . version ";"    (rule 6)

	version        shift, and enter state 23


State 18

	PragmaName -> ident .                               (rule 7)

	version        reduce using rule 7


State 19

	ContractDefinition -> ConLibInt ident . zero(InheritanceSpecList) "{" list(ContractPart) "}"    (rule 14)

	"is"           shift, and enter state 22
	"{"            reduce using rule 121

	InheritanceSpecListgoto state 20
	zero(InheritanceSpecList)goto state 21

State 20

	zero(InheritanceSpecList) -> InheritanceSpecList .    (rule 120)

	"{"            reduce using rule 120


State 21

	ContractDefinition -> ConLibInt ident zero(InheritanceSpecList) . "{" list(ContractPart) "}"    (rule 14)

	"{"            shift, and enter state 34


State 22

	InheritanceSpecList -> "is" . InheritanceSpecifier list(OMInheritanceSpec)    (rule 18)

	ident          shift, and enter state 33

	InheritanceSpecifiergoto state 31
	UserDefinedTypeNamegoto state 32

State 23

	PragmaDirective -> "pragma" PragmaName version . ";"    (rule 6)

	";"            shift, and enter state 30


State 24

	ImportDirective -> "import" stringLiteral ImportAs . ";"    (rule 8)

	";"            shift, and enter state 29


State 25

	ImportAs -> "as" . ident                            (rule 10)

	ident          shift, and enter state 28


State 26

	ImportDirective -> "import" ImportAster ImportAs . "from" stringLiteral ";"    (rule 9)

	"from"         shift, and enter state 27


State 27

	ImportDirective -> "import" ImportAster ImportAs "from" . stringLiteral ";"    (rule 9)

	stringLiteral  shift, and enter state 58


State 28

	ImportAs -> "as" ident .                            (rule 10)

	"from"         reduce using rule 10
	";"            reduce using rule 10


State 29

	ImportDirective -> "import" stringLiteral ImportAs ";" .    (rule 8)

	"pragma"       reduce using rule 8
	"import"       reduce using rule 8
	contract       reduce using rule 8
	"library"      reduce using rule 8
	"interface"    reduce using rule 8
	%eof           reduce using rule 8


State 30

	PragmaDirective -> "pragma" PragmaName version ";" .    (rule 6)

	"pragma"       reduce using rule 6
	"import"       reduce using rule 6
	contract       reduce using rule 6
	"library"      reduce using rule 6
	"interface"    reduce using rule 6
	%eof           reduce using rule 6


State 31

	InheritanceSpecList -> "is" InheritanceSpecifier . list(OMInheritanceSpec)    (rule 18)

	"{"            reduce using rule 105
	","            shift, and enter state 57

	OMInheritanceSpecgoto state 54
	list(OMInheritanceSpec)goto state 55
	list1(OMInheritanceSpec)goto state 56

State 32

	InheritanceSpecifier -> UserDefinedTypeName .       (rule 20)

	"{"            reduce using rule 20
	","            reduce using rule 20


State 33

	UserDefinedTypeName -> ident .                      (rule 89)

	"public"       reduce using rule 89
	"internal"     reduce using rule 89
	"private"      reduce using rule 89
	"constant"     reduce using rule 89
	"memory"       reduce using rule 89
	"storage"      reduce using rule 89
	"{"            reduce using rule 89
	";"            reduce using rule 89
	","            reduce using rule 89
	ident          reduce using rule 89


State 34

	ContractDefinition -> ConLibInt ident zero(InheritanceSpecList) "{" . list(ContractPart) "}"    (rule 14)

	"string"       shift, and enter state 46
	function       shift, and enter state 47
	"address"      shift, and enter state 48
	"bool"         shift, and enter state 49
	"var"          shift, and enter state 50
	"using"        shift, and enter state 51
	"event"        shift, and enter state 52
	"modifier"     shift, and enter state 53
	"}"            reduce using rule 95
	ident          shift, and enter state 33

	ContractPart   goto state 35
	FunctionDefinitiongoto state 36
	EventDefinitiongoto state 37
	ModifierDefinitiongoto state 38
	StateVarDec    goto state 39
	UsingForDec    goto state 40
	TypeName       goto state 41
	UserDefinedTypeNamegoto state 42
	ElementaryTypeNamegoto state 43
	list(ContractPart)goto state 44
	list1(ContractPart)goto state 45

State 35

	list1(ContractPart) -> ContractPart .               (rule 132)
	list1(ContractPart) -> ContractPart . list1(ContractPart)    (rule 133)

	"string"       shift, and enter state 46
	function       shift, and enter state 47
	"address"      shift, and enter state 48
	"bool"         shift, and enter state 49
	"var"          shift, and enter state 50
	"using"        shift, and enter state 51
	"event"        shift, and enter state 52
	"modifier"     shift, and enter state 53
	"}"            reduce using rule 132
	ident          shift, and enter state 33

	ContractPart   goto state 35
	FunctionDefinitiongoto state 36
	EventDefinitiongoto state 37
	ModifierDefinitiongoto state 38
	StateVarDec    goto state 39
	UsingForDec    goto state 40
	TypeName       goto state 41
	UserDefinedTypeNamegoto state 42
	ElementaryTypeNamegoto state 43
	list1(ContractPart)goto state 73

State 36

	ContractPart -> FunctionDefinition .                (rule 25)

	"string"       reduce using rule 25
	function       reduce using rule 25
	"address"      reduce using rule 25
	"bool"         reduce using rule 25
	"var"          reduce using rule 25
	"using"        reduce using rule 25
	"event"        reduce using rule 25
	"modifier"     reduce using rule 25
	"}"            reduce using rule 25
	ident          reduce using rule 25


State 37

	ContractPart -> EventDefinition .                   (rule 26)

	"string"       reduce using rule 26
	function       reduce using rule 26
	"address"      reduce using rule 26
	"bool"         reduce using rule 26
	"var"          reduce using rule 26
	"using"        reduce using rule 26
	"event"        reduce using rule 26
	"modifier"     reduce using rule 26
	"}"            reduce using rule 26
	ident          reduce using rule 26


State 38

	ContractPart -> ModifierDefinition .                (rule 27)

	"string"       reduce using rule 27
	function       reduce using rule 27
	"address"      reduce using rule 27
	"bool"         reduce using rule 27
	"var"          reduce using rule 27
	"using"        reduce using rule 27
	"event"        reduce using rule 27
	"modifier"     reduce using rule 27
	"}"            reduce using rule 27
	ident          reduce using rule 27


State 39

	ContractPart -> StateVarDec .                       (rule 23)

	"string"       reduce using rule 23
	function       reduce using rule 23
	"address"      reduce using rule 23
	"bool"         reduce using rule 23
	"var"          reduce using rule 23
	"using"        reduce using rule 23
	"event"        reduce using rule 23
	"modifier"     reduce using rule 23
	"}"            reduce using rule 23
	ident          reduce using rule 23


State 40

	ContractPart -> UsingForDec .                       (rule 24)

	"string"       reduce using rule 24
	function       reduce using rule 24
	"address"      reduce using rule 24
	"bool"         reduce using rule 24
	"var"          reduce using rule 24
	"using"        reduce using rule 24
	"event"        reduce using rule 24
	"modifier"     reduce using rule 24
	"}"            reduce using rule 24
	ident          reduce using rule 24


State 41

	StateVarDec -> TypeName . zero(AssVar) ident zero(MExpression) ";"    (rule 58)

	"public"       shift, and enter state 69
	"internal"     shift, and enter state 70
	"private"      shift, and enter state 71
	"constant"     shift, and enter state 72
	ident          reduce using rule 115

	AssVar         goto state 67
	zero(AssVar)   goto state 68

State 42

	TypeName -> UserDefinedTypeName .                   (rule 63)

	"public"       reduce using rule 63
	"internal"     reduce using rule 63
	"private"      reduce using rule 63
	"constant"     reduce using rule 63
	"memory"       reduce using rule 63
	"storage"      reduce using rule 63
	";"            reduce using rule 63
	ident          reduce using rule 63


State 43

	TypeName -> ElementaryTypeName .                    (rule 62)

	"public"       reduce using rule 62
	"internal"     reduce using rule 62
	"private"      reduce using rule 62
	"constant"     reduce using rule 62
	"memory"       reduce using rule 62
	"storage"      reduce using rule 62
	";"            reduce using rule 62
	ident          reduce using rule 62


State 44

	ContractDefinition -> ConLibInt ident zero(InheritanceSpecList) "{" list(ContractPart) . "}"    (rule 14)

	"}"            shift, and enter state 66


State 45

	list(ContractPart) -> list1(ContractPart) .         (rule 94)

	"}"            reduce using rule 94


State 46

	ElementaryTypeName -> "string" .                    (rule 93)

	"public"       reduce using rule 93
	"internal"     reduce using rule 93
	"private"      reduce using rule 93
	"constant"     reduce using rule 93
	"memory"       reduce using rule 93
	"storage"      reduce using rule 93
	";"            reduce using rule 93
	ident          reduce using rule 93


State 47

	FunctionDefinition -> function . ident ParameterList list(FuncMods) zero(ReturnParam) TermBlock    (rule 28)

	ident          shift, and enter state 65


State 48

	ElementaryTypeName -> "address" .                   (rule 90)

	"public"       reduce using rule 90
	"internal"     reduce using rule 90
	"private"      reduce using rule 90
	"constant"     reduce using rule 90
	"memory"       reduce using rule 90
	"storage"      reduce using rule 90
	";"            reduce using rule 90
	ident          reduce using rule 90


State 49

	ElementaryTypeName -> "bool" .                      (rule 91)

	"public"       reduce using rule 91
	"internal"     reduce using rule 91
	"private"      reduce using rule 91
	"constant"     reduce using rule 91
	"memory"       reduce using rule 91
	"storage"      reduce using rule 91
	";"            reduce using rule 91
	ident          reduce using rule 91


State 50

	ElementaryTypeName -> "var" .                       (rule 92)

	"public"       reduce using rule 92
	"internal"     reduce using rule 92
	"private"      reduce using rule 92
	"constant"     reduce using rule 92
	"memory"       reduce using rule 92
	"storage"      reduce using rule 92
	";"            reduce using rule 92
	ident          reduce using rule 92


State 51

	UsingForDec -> "using" . ident "for" TypeName ";"    (rule 59)

	ident          shift, and enter state 64


State 52

	EventDefinition -> "event" . ident zero(EventParamList) zero(AnonList) ";"    (rule 29)

	ident          shift, and enter state 63


State 53

	ModifierDefinition -> "modifier" . ident zero(ParameterList) TermBlock    (rule 30)

	ident          shift, and enter state 62


State 54

	list1(OMInheritanceSpec) -> OMInheritanceSpec .     (rule 142)
	list1(OMInheritanceSpec) -> OMInheritanceSpec . list1(OMInheritanceSpec)    (rule 143)

	"{"            reduce using rule 142
	","            shift, and enter state 57

	OMInheritanceSpecgoto state 54
	list1(OMInheritanceSpec)goto state 61

State 55

	InheritanceSpecList -> "is" InheritanceSpecifier list(OMInheritanceSpec) .    (rule 18)

	"{"            reduce using rule 18


State 56

	list(OMInheritanceSpec) -> list1(OMInheritanceSpec) .    (rule 104)

	"{"            reduce using rule 104


State 57

	OMInheritanceSpec -> "," . InheritanceSpecifier     (rule 19)

	ident          shift, and enter state 33

	InheritanceSpecifiergoto state 60
	UserDefinedTypeNamegoto state 32

State 58

	ImportDirective -> "import" ImportAster ImportAs "from" stringLiteral . ";"    (rule 9)

	";"            shift, and enter state 59


State 59

	ImportDirective -> "import" ImportAster ImportAs "from" stringLiteral ";" .    (rule 9)

	"pragma"       reduce using rule 9
	"import"       reduce using rule 9
	contract       reduce using rule 9
	"library"      reduce using rule 9
	"interface"    reduce using rule 9
	%eof           reduce using rule 9


State 60

	OMInheritanceSpec -> "," InheritanceSpecifier .     (rule 19)

	"{"            reduce using rule 19
	","            reduce using rule 19


State 61

	list1(OMInheritanceSpec) -> OMInheritanceSpec list1(OMInheritanceSpec) .    (rule 143)

	"{"            reduce using rule 143


State 62

	ModifierDefinition -> "modifier" ident . zero(ParameterList) TermBlock    (rule 30)

	"{"            reduce using rule 125
	";"            reduce using rule 125
	"("            shift, and enter state 76

	ParameterList  goto state 81
	zero(ParameterList)goto state 82

State 63

	EventDefinition -> "event" ident . zero(EventParamList) zero(AnonList) ";"    (rule 29)

	"anonymous"    reduce using rule 117
	";"            reduce using rule 117
	"("            shift, and enter state 80

	EventParamList goto state 78
	zero(EventParamList)goto state 79

State 64

	UsingForDec -> "using" ident . "for" TypeName ";"    (rule 59)

	"for"          shift, and enter state 77


State 65

	FunctionDefinition -> function ident . ParameterList list(FuncMods) zero(ReturnParam) TermBlock    (rule 28)

	"("            shift, and enter state 76

	ParameterList  goto state 75

State 66

	ContractDefinition -> ConLibInt ident zero(InheritanceSpecList) "{" list(ContractPart) "}" .    (rule 14)

	"pragma"       reduce using rule 14
	"import"       reduce using rule 14
	contract       reduce using rule 14
	"library"      reduce using rule 14
	"interface"    reduce using rule 14
	%eof           reduce using rule 14


State 67

	zero(AssVar) -> AssVar .                            (rule 114)

	ident          reduce using rule 114


State 68

	StateVarDec -> TypeName zero(AssVar) . ident zero(MExpression) ";"    (rule 58)

	ident          shift, and enter state 74


State 69

	AssVar -> "public" .                                (rule 64)

	ident          reduce using rule 64


State 70

	AssVar -> "internal" .                              (rule 66)

	ident          reduce using rule 66


State 71

	AssVar -> "private" .                               (rule 65)

	ident          reduce using rule 65


State 72

	AssVar -> "constant" .                              (rule 67)

	ident          reduce using rule 67


State 73

	list1(ContractPart) -> ContractPart list1(ContractPart) .    (rule 133)

	"}"            reduce using rule 133


State 74

	StateVarDec -> TypeName zero(AssVar) ident . zero(MExpression) ";"    (rule 58)

	"="            shift, and enter state 115
	";"            reduce using rule 123

	MExpression    goto state 113
	zero(MExpression)goto state 114

State 75

	FunctionDefinition -> function ident ParameterList . list(FuncMods) zero(ReturnParam) TermBlock    (rule 28)

	"external"     shift, and enter state 104
	"public"       shift, and enter state 105
	"internal"     shift, and enter state 106
	"private"      shift, and enter state 107
	"constant"     shift, and enter state 108
	"view"         shift, and enter state 109
	"pure"         shift, and enter state 110
	"payable"      shift, and enter state 111
	"returns"      reduce using rule 101
	"{"            reduce using rule 101
	";"            reduce using rule 101
	ident          shift, and enter state 112

	ModifierInvocationgoto state 98
	FuncMods       goto state 99
	StateMutabilitygoto state 100
	FuncVar        goto state 101
	list(FuncMods) goto state 102
	list1(FuncMods)goto state 103

State 76

	ParameterList -> "(" . zero(Parameters) ")"         (rule 38)

	"string"       shift, and enter state 46
	"address"      shift, and enter state 48
	"bool"         shift, and enter state 49
	"var"          shift, and enter state 50
	ident          shift, and enter state 33
	")"            reduce using rule 127

	Parameters     goto state 94
	Parameter      goto state 95
	TypeName       goto state 96
	UserDefinedTypeNamegoto state 42
	ElementaryTypeNamegoto state 43
	zero(Parameters)goto state 97

State 77

	UsingForDec -> "using" ident "for" . TypeName ";"    (rule 59)

	"string"       shift, and enter state 46
	"address"      shift, and enter state 48
	"bool"         shift, and enter state 49
	"var"          shift, and enter state 50
	ident          shift, and enter state 33

	TypeName       goto state 93
	UserDefinedTypeNamegoto state 42
	ElementaryTypeNamegoto state 43

State 78

	zero(EventParamList) -> EventParamList .            (rule 116)

	"anonymous"    reduce using rule 116
	";"            reduce using rule 116


State 79

	EventDefinition -> "event" ident zero(EventParamList) . zero(AnonList) ";"    (rule 29)

	"anonymous"    shift, and enter state 92
	";"            reduce using rule 113

	AnonList       goto state 90
	zero(AnonList) goto state 91

State 80

	EventParamList -> "(" . zero(EventParams) ")"       (rule 33)

	"string"       shift, and enter state 46
	"address"      shift, and enter state 48
	"bool"         shift, and enter state 49
	"var"          shift, and enter state 50
	ident          shift, and enter state 33
	")"            reduce using rule 119

	EventParams    goto state 86
	EParameters    goto state 87
	TypeName       goto state 88
	UserDefinedTypeNamegoto state 42
	ElementaryTypeNamegoto state 43
	zero(EventParams)goto state 89

State 81

	zero(ParameterList) -> ParameterList .              (rule 124)

	"{"            reduce using rule 124
	";"            reduce using rule 124


State 82

	ModifierDefinition -> "modifier" ident zero(ParameterList) . TermBlock    (rule 30)

	"{"            shift, and enter state 84
	";"            shift, and enter state 85

	TermBlock      goto state 83

State 83

	ModifierDefinition -> "modifier" ident zero(ParameterList) TermBlock .    (rule 30)

	"string"       reduce using rule 30
	function       reduce using rule 30
	"address"      reduce using rule 30
	"bool"         reduce using rule 30
	"var"          reduce using rule 30
	"using"        reduce using rule 30
	"event"        reduce using rule 30
	"modifier"     reduce using rule 30
	"}"            reduce using rule 30
	ident          reduce using rule 30


State 84

	TermBlock -> "{" . list(Statement) "}"              (rule 47)

	"decimalnum"   shift, and enter state 120
	"var"          shift, and enter state 155
	"true"         shift, and enter state 121
	"false"        shift, and enter state 122
	"}"            reduce using rule 109
	ident          shift, and enter state 123
	stringLiteral  shift, and enter state 124

	Expression     goto state 148
	Statement      goto state 149
	SimpleStatementgoto state 150
	VariableDefinitiongoto state 151
	ExpressionStatementgoto state 152
	PrimaryExpressiongoto state 117
	BooleanLiteral goto state 118
	NumberLiteral  goto state 119
	list(Statement)goto state 153
	list1(Statement)goto state 154

State 85

	TermBlock -> ";" .                                  (rule 46)

	"string"       reduce using rule 46
	function       reduce using rule 46
	"address"      reduce using rule 46
	"bool"         reduce using rule 46
	"var"          reduce using rule 46
	"using"        reduce using rule 46
	"event"        reduce using rule 46
	"modifier"     reduce using rule 46
	"}"            reduce using rule 46
	ident          reduce using rule 46


State 86

	zero(EventParams) -> EventParams .                  (rule 118)

	")"            reduce using rule 118


State 87

	EventParams -> EParameters . list(EParamList)       (rule 34)

	","            shift, and enter state 147
	")"            reduce using rule 97

	EParamList     goto state 144
	list(EParamList)goto state 145
	list1(EParamList)goto state 146

State 88

	EParameters -> TypeName . ident                     (rule 36)

	ident          shift, and enter state 143


State 89

	EventParamList -> "(" zero(EventParams) . ")"       (rule 33)

	")"            shift, and enter state 142


State 90

	zero(AnonList) -> AnonList .                        (rule 112)

	";"            reduce using rule 112


State 91

	EventDefinition -> "event" ident zero(EventParamList) zero(AnonList) . ";"    (rule 29)

	";"            shift, and enter state 141


State 92

	AnonList -> "anonymous" .                           (rule 37)

	";"            reduce using rule 37


State 93

	UsingForDec -> "using" ident "for" TypeName . ";"    (rule 59)

	";"            shift, and enter state 140


State 94

	zero(Parameters) -> Parameters .                    (rule 126)

	")"            reduce using rule 126


State 95

	Parameters -> Parameter . list(ParamList)           (rule 39)

	","            shift, and enter state 139
	")"            reduce using rule 107

	ParamList      goto state 136
	list(ParamList)goto state 137
	list1(ParamList)goto state 138

State 96

	Parameter -> TypeName . zero(StorageLocation) ident    (rule 41)

	"memory"       shift, and enter state 134
	"storage"      shift, and enter state 135
	ident          reduce using rule 131

	StorageLocationgoto state 132
	zero(StorageLocation)goto state 133

State 97

	ParameterList -> "(" zero(Parameters) . ")"         (rule 38)

	")"            shift, and enter state 131


State 98

	FuncMods -> ModifierInvocation .                    (rule 42)

	"external"     reduce using rule 42
	"public"       reduce using rule 42
	"internal"     reduce using rule 42
	"private"      reduce using rule 42
	"constant"     reduce using rule 42
	"view"         reduce using rule 42
	"pure"         reduce using rule 42
	"payable"      reduce using rule 42
	"returns"      reduce using rule 42
	"{"            reduce using rule 42
	";"            reduce using rule 42
	ident          reduce using rule 42


State 99

	list1(FuncMods) -> FuncMods .                       (rule 138)
	list1(FuncMods) -> FuncMods . list1(FuncMods)       (rule 139)

	"external"     shift, and enter state 104
	"public"       shift, and enter state 105
	"internal"     shift, and enter state 106
	"private"      shift, and enter state 107
	"constant"     shift, and enter state 108
	"view"         shift, and enter state 109
	"pure"         shift, and enter state 110
	"payable"      shift, and enter state 111
	"returns"      reduce using rule 138
	"{"            reduce using rule 138
	";"            reduce using rule 138
	ident          shift, and enter state 112

	ModifierInvocationgoto state 98
	FuncMods       goto state 99
	StateMutabilitygoto state 100
	FuncVar        goto state 101
	list1(FuncMods)goto state 130

State 100

	FuncMods -> StateMutability .                       (rule 43)

	"external"     reduce using rule 43
	"public"       reduce using rule 43
	"internal"     reduce using rule 43
	"private"      reduce using rule 43
	"constant"     reduce using rule 43
	"view"         reduce using rule 43
	"pure"         reduce using rule 43
	"payable"      reduce using rule 43
	"returns"      reduce using rule 43
	"{"            reduce using rule 43
	";"            reduce using rule 43
	ident          reduce using rule 43


State 101

	FuncMods -> FuncVar .                               (rule 44)

	"external"     reduce using rule 44
	"public"       reduce using rule 44
	"internal"     reduce using rule 44
	"private"      reduce using rule 44
	"constant"     reduce using rule 44
	"view"         reduce using rule 44
	"pure"         reduce using rule 44
	"payable"      reduce using rule 44
	"returns"      reduce using rule 44
	"{"            reduce using rule 44
	";"            reduce using rule 44
	ident          reduce using rule 44


State 102

	FunctionDefinition -> function ident ParameterList list(FuncMods) . zero(ReturnParam) TermBlock    (rule 28)

	"returns"      shift, and enter state 129
	"{"            reduce using rule 129
	";"            reduce using rule 129

	ReturnParam    goto state 127
	zero(ReturnParam)goto state 128

State 103

	list(FuncMods) -> list1(FuncMods) .                 (rule 100)

	"returns"      reduce using rule 100
	"{"            reduce using rule 100
	";"            reduce using rule 100


State 104

	FuncVar -> "external" .                             (rule 54)

	"external"     reduce using rule 54
	"public"       reduce using rule 54
	"internal"     reduce using rule 54
	"private"      reduce using rule 54
	"constant"     reduce using rule 54
	"view"         reduce using rule 54
	"pure"         reduce using rule 54
	"payable"      reduce using rule 54
	"returns"      reduce using rule 54
	"{"            reduce using rule 54
	";"            reduce using rule 54
	ident          reduce using rule 54


State 105

	FuncVar -> "public" .                               (rule 57)

	"external"     reduce using rule 57
	"public"       reduce using rule 57
	"internal"     reduce using rule 57
	"private"      reduce using rule 57
	"constant"     reduce using rule 57
	"view"         reduce using rule 57
	"pure"         reduce using rule 57
	"payable"      reduce using rule 57
	"returns"      reduce using rule 57
	"{"            reduce using rule 57
	";"            reduce using rule 57
	ident          reduce using rule 57


State 106

	FuncVar -> "internal" .                             (rule 55)

	"external"     reduce using rule 55
	"public"       reduce using rule 55
	"internal"     reduce using rule 55
	"private"      reduce using rule 55
	"constant"     reduce using rule 55
	"view"         reduce using rule 55
	"pure"         reduce using rule 55
	"payable"      reduce using rule 55
	"returns"      reduce using rule 55
	"{"            reduce using rule 55
	";"            reduce using rule 55
	ident          reduce using rule 55


State 107

	FuncVar -> "private" .                              (rule 56)

	"external"     reduce using rule 56
	"public"       reduce using rule 56
	"internal"     reduce using rule 56
	"private"      reduce using rule 56
	"constant"     reduce using rule 56
	"view"         reduce using rule 56
	"pure"         reduce using rule 56
	"payable"      reduce using rule 56
	"returns"      reduce using rule 56
	"{"            reduce using rule 56
	";"            reduce using rule 56
	ident          reduce using rule 56


State 108

	StateMutability -> "constant" .                     (rule 49)

	"external"     reduce using rule 49
	"public"       reduce using rule 49
	"internal"     reduce using rule 49
	"private"      reduce using rule 49
	"constant"     reduce using rule 49
	"view"         reduce using rule 49
	"pure"         reduce using rule 49
	"payable"      reduce using rule 49
	"returns"      reduce using rule 49
	"{"            reduce using rule 49
	";"            reduce using rule 49
	ident          reduce using rule 49


State 109

	StateMutability -> "view" .                         (rule 50)

	"external"     reduce using rule 50
	"public"       reduce using rule 50
	"internal"     reduce using rule 50
	"private"      reduce using rule 50
	"constant"     reduce using rule 50
	"view"         reduce using rule 50
	"pure"         reduce using rule 50
	"payable"      reduce using rule 50
	"returns"      reduce using rule 50
	"{"            reduce using rule 50
	";"            reduce using rule 50
	ident          reduce using rule 50


State 110

	StateMutability -> "pure" .                         (rule 48)

	"external"     reduce using rule 48
	"public"       reduce using rule 48
	"internal"     reduce using rule 48
	"private"      reduce using rule 48
	"constant"     reduce using rule 48
	"view"         reduce using rule 48
	"pure"         reduce using rule 48
	"payable"      reduce using rule 48
	"returns"      reduce using rule 48
	"{"            reduce using rule 48
	";"            reduce using rule 48
	ident          reduce using rule 48


State 111

	StateMutability -> "payable" .                      (rule 51)

	"external"     reduce using rule 51
	"public"       reduce using rule 51
	"internal"     reduce using rule 51
	"private"      reduce using rule 51
	"constant"     reduce using rule 51
	"view"         reduce using rule 51
	"pure"         reduce using rule 51
	"payable"      reduce using rule 51
	"returns"      reduce using rule 51
	"{"            reduce using rule 51
	";"            reduce using rule 51
	ident          reduce using rule 51


State 112

	ModifierInvocation -> ident . "(" list(ModExpList) ")"    (rule 31)

	"("            shift, and enter state 126


State 113

	zero(MExpression) -> MExpression .                  (rule 122)

	";"            reduce using rule 122


State 114

	StateVarDec -> TypeName zero(AssVar) ident zero(MExpression) . ";"    (rule 58)

	";"            shift, and enter state 125


State 115

	MExpression -> "=" . Expression                     (rule 70)

	"decimalnum"   shift, and enter state 120
	"true"         shift, and enter state 121
	"false"        shift, and enter state 122
	ident          shift, and enter state 123
	stringLiteral  shift, and enter state 124

	Expression     goto state 116
	PrimaryExpressiongoto state 117
	BooleanLiteral goto state 118
	NumberLiteral  goto state 119

State 116

	MExpression -> "=" Expression .                     (rule 70)

	";"            reduce using rule 70


State 117

	Expression -> PrimaryExpression .                   (rule 73)

	"decimalnum"   reduce using rule 73
	"true"         reduce using rule 73
	"false"        reduce using rule 73
	";"            reduce using rule 73
	","            reduce using rule 73
	ident          reduce using rule 73
	stringLiteral  reduce using rule 73
	")"            reduce using rule 73


State 118

	PrimaryExpression -> BooleanLiteral .               (rule 82)

	"decimalnum"   reduce using rule 82
	"true"         reduce using rule 82
	"false"        reduce using rule 82
	";"            reduce using rule 82
	","            reduce using rule 82
	ident          reduce using rule 82
	stringLiteral  reduce using rule 82
	")"            reduce using rule 82


State 119

	PrimaryExpression -> NumberLiteral .                (rule 83)

	"decimalnum"   reduce using rule 83
	"true"         reduce using rule 83
	"false"        reduce using rule 83
	";"            reduce using rule 83
	","            reduce using rule 83
	ident          reduce using rule 83
	stringLiteral  reduce using rule 83
	")"            reduce using rule 83


State 120

	NumberLiteral -> "decimalnum" . numberunit          (rule 88)

	numberunit     shift, and enter state 173


State 121

	BooleanLiteral -> "true" .                          (rule 86)

	"decimalnum"   reduce using rule 86
	"true"         reduce using rule 86
	"false"        reduce using rule 86
	";"            reduce using rule 86
	","            reduce using rule 86
	ident          reduce using rule 86
	stringLiteral  reduce using rule 86
	")"            reduce using rule 86


State 122

	BooleanLiteral -> "false" .                         (rule 87)

	"decimalnum"   reduce using rule 87
	"true"         reduce using rule 87
	"false"        reduce using rule 87
	";"            reduce using rule 87
	","            reduce using rule 87
	ident          reduce using rule 87
	stringLiteral  reduce using rule 87
	")"            reduce using rule 87


State 123

	PrimaryExpression -> ident .                        (rule 85)

	"decimalnum"   reduce using rule 85
	"true"         reduce using rule 85
	"false"        reduce using rule 85
	";"            reduce using rule 85
	","            reduce using rule 85
	ident          reduce using rule 85
	stringLiteral  reduce using rule 85
	")"            reduce using rule 85


State 124

	PrimaryExpression -> stringLiteral .                (rule 84)

	"decimalnum"   reduce using rule 84
	"true"         reduce using rule 84
	"false"        reduce using rule 84
	";"            reduce using rule 84
	","            reduce using rule 84
	ident          reduce using rule 84
	stringLiteral  reduce using rule 84
	")"            reduce using rule 84


State 125

	StateVarDec -> TypeName zero(AssVar) ident zero(MExpression) ";" .    (rule 58)

	"string"       reduce using rule 58
	function       reduce using rule 58
	"address"      reduce using rule 58
	"bool"         reduce using rule 58
	"var"          reduce using rule 58
	"using"        reduce using rule 58
	"event"        reduce using rule 58
	"modifier"     reduce using rule 58
	"}"            reduce using rule 58
	ident          reduce using rule 58


State 126

	ModifierInvocation -> ident "(" . list(ModExpList) ")"    (rule 31)

	"decimalnum"   shift, and enter state 120
	"true"         shift, and enter state 121
	"false"        shift, and enter state 122
	ident          shift, and enter state 123
	stringLiteral  shift, and enter state 124
	")"            reduce using rule 103

	ModExpList     goto state 168
	ExpressionList goto state 169
	Expression     goto state 170
	PrimaryExpressiongoto state 117
	BooleanLiteral goto state 118
	NumberLiteral  goto state 119
	list(ModExpList)goto state 171
	list1(ModExpList)goto state 172

State 127

	zero(ReturnParam) -> ReturnParam .                  (rule 128)

	"{"            reduce using rule 128
	";"            reduce using rule 128


State 128

	FunctionDefinition -> function ident ParameterList list(FuncMods) zero(ReturnParam) . TermBlock    (rule 28)

	"{"            shift, and enter state 84
	";"            shift, and enter state 85

	TermBlock      goto state 167

State 129

	ReturnParam -> "returns" . ParameterList            (rule 45)

	"("            shift, and enter state 76

	ParameterList  goto state 166

State 130

	list1(FuncMods) -> FuncMods list1(FuncMods) .       (rule 139)

	"returns"      reduce using rule 139
	"{"            reduce using rule 139
	";"            reduce using rule 139


State 131

	ParameterList -> "(" zero(Parameters) ")" .         (rule 38)

	"external"     reduce using rule 38
	"public"       reduce using rule 38
	"internal"     reduce using rule 38
	"private"      reduce using rule 38
	"constant"     reduce using rule 38
	"view"         reduce using rule 38
	"pure"         reduce using rule 38
	"payable"      reduce using rule 38
	"returns"      reduce using rule 38
	"{"            reduce using rule 38
	";"            reduce using rule 38
	ident          reduce using rule 38


State 132

	zero(StorageLocation) -> StorageLocation .          (rule 130)

	ident          reduce using rule 130


State 133

	Parameter -> TypeName zero(StorageLocation) . ident    (rule 41)

	ident          shift, and enter state 165


State 134

	StorageLocation -> "memory" .                       (rule 52)

	ident          reduce using rule 52


State 135

	StorageLocation -> "storage" .                      (rule 53)

	ident          reduce using rule 53


State 136

	list1(ParamList) -> ParamList .                     (rule 144)
	list1(ParamList) -> ParamList . list1(ParamList)    (rule 145)

	","            shift, and enter state 139
	")"            reduce using rule 144

	ParamList      goto state 136
	list1(ParamList)goto state 164

State 137

	Parameters -> Parameter list(ParamList) .           (rule 39)

	")"            reduce using rule 39


State 138

	list(ParamList) -> list1(ParamList) .               (rule 106)

	")"            reduce using rule 106


State 139

	ParamList -> "," . Parameter                        (rule 40)

	"string"       shift, and enter state 46
	"address"      shift, and enter state 48
	"bool"         shift, and enter state 49
	"var"          shift, and enter state 50
	ident          shift, and enter state 33

	Parameter      goto state 163
	TypeName       goto state 96
	UserDefinedTypeNamegoto state 42
	ElementaryTypeNamegoto state 43

State 140

	UsingForDec -> "using" ident "for" TypeName ";" .    (rule 59)

	"string"       reduce using rule 59
	function       reduce using rule 59
	"address"      reduce using rule 59
	"bool"         reduce using rule 59
	"var"          reduce using rule 59
	"using"        reduce using rule 59
	"event"        reduce using rule 59
	"modifier"     reduce using rule 59
	"}"            reduce using rule 59
	ident          reduce using rule 59


State 141

	EventDefinition -> "event" ident zero(EventParamList) zero(AnonList) ";" .    (rule 29)

	"string"       reduce using rule 29
	function       reduce using rule 29
	"address"      reduce using rule 29
	"bool"         reduce using rule 29
	"var"          reduce using rule 29
	"using"        reduce using rule 29
	"event"        reduce using rule 29
	"modifier"     reduce using rule 29
	"}"            reduce using rule 29
	ident          reduce using rule 29


State 142

	EventParamList -> "(" zero(EventParams) ")" .       (rule 33)

	"anonymous"    reduce using rule 33
	";"            reduce using rule 33


State 143

	EParameters -> TypeName ident .                     (rule 36)

	","            reduce using rule 36
	")"            reduce using rule 36


State 144

	list1(EParamList) -> EParamList .                   (rule 134)
	list1(EParamList) -> EParamList . list1(EParamList)    (rule 135)

	","            shift, and enter state 147
	")"            reduce using rule 134

	EParamList     goto state 144
	list1(EParamList)goto state 162

State 145

	EventParams -> EParameters list(EParamList) .       (rule 34)

	")"            reduce using rule 34


State 146

	list(EParamList) -> list1(EParamList) .             (rule 96)

	")"            reduce using rule 96


State 147

	EParamList -> "," . EParameters                     (rule 35)

	"string"       shift, and enter state 46
	"address"      shift, and enter state 48
	"bool"         shift, and enter state 49
	"var"          shift, and enter state 50
	ident          shift, and enter state 33

	EParameters    goto state 161
	TypeName       goto state 88
	UserDefinedTypeNamegoto state 42
	ElementaryTypeNamegoto state 43

State 148

	ExpressionStatement -> Expression .                 (rule 79)

	";"            reduce using rule 79


State 149

	list1(Statement) -> Statement .                     (rule 146)
	list1(Statement) -> Statement . list1(Statement)    (rule 147)

	"decimalnum"   shift, and enter state 120
	"var"          shift, and enter state 155
	"true"         shift, and enter state 121
	"false"        shift, and enter state 122
	"}"            reduce using rule 146
	ident          shift, and enter state 123
	stringLiteral  shift, and enter state 124

	Expression     goto state 148
	Statement      goto state 149
	SimpleStatementgoto state 150
	VariableDefinitiongoto state 151
	ExpressionStatementgoto state 152
	PrimaryExpressiongoto state 117
	BooleanLiteral goto state 118
	NumberLiteral  goto state 119
	list1(Statement)goto state 160

State 150

	Statement -> SimpleStatement . ";"                  (rule 74)

	";"            shift, and enter state 159


State 151

	SimpleStatement -> VariableDefinition .             (rule 75)

	";"            reduce using rule 75


State 152

	SimpleStatement -> ExpressionStatement .            (rule 76)

	";"            reduce using rule 76


State 153

	TermBlock -> "{" list(Statement) . "}"              (rule 47)

	"}"            shift, and enter state 158


State 154

	list(Statement) -> list1(Statement) .               (rule 108)

	"}"            reduce using rule 108


State 155

	VariableDefinition -> "var" . VariableDeclaration    (rule 77)

	"string"       shift, and enter state 46
	"address"      shift, and enter state 48
	"bool"         shift, and enter state 49
	"var"          shift, and enter state 50
	ident          shift, and enter state 33

	TypeName       goto state 156
	VariableDeclarationgoto state 157
	UserDefinedTypeNamegoto state 42
	ElementaryTypeNamegoto state 43

State 156

	VariableDeclaration -> TypeName . zero(StorageLocation) ident    (rule 78)

	"memory"       shift, and enter state 134
	"storage"      shift, and enter state 135
	ident          reduce using rule 131

	StorageLocationgoto state 132
	zero(StorageLocation)goto state 180

State 157

	VariableDefinition -> "var" VariableDeclaration .    (rule 77)

	";"            reduce using rule 77


State 158

	TermBlock -> "{" list(Statement) "}" .              (rule 47)

	"string"       reduce using rule 47
	function       reduce using rule 47
	"address"      reduce using rule 47
	"bool"         reduce using rule 47
	"var"          reduce using rule 47
	"using"        reduce using rule 47
	"event"        reduce using rule 47
	"modifier"     reduce using rule 47
	"}"            reduce using rule 47
	ident          reduce using rule 47


State 159

	Statement -> SimpleStatement ";" .                  (rule 74)

	"decimalnum"   reduce using rule 74
	"var"          reduce using rule 74
	"true"         reduce using rule 74
	"false"        reduce using rule 74
	"}"            reduce using rule 74
	ident          reduce using rule 74
	stringLiteral  reduce using rule 74


State 160

	list1(Statement) -> Statement list1(Statement) .    (rule 147)

	"}"            reduce using rule 147


State 161

	EParamList -> "," EParameters .                     (rule 35)

	","            reduce using rule 35
	")"            reduce using rule 35


State 162

	list1(EParamList) -> EParamList list1(EParamList) .    (rule 135)

	")"            reduce using rule 135


State 163

	ParamList -> "," Parameter .                        (rule 40)

	","            reduce using rule 40
	")"            reduce using rule 40


State 164

	list1(ParamList) -> ParamList list1(ParamList) .    (rule 145)

	")"            reduce using rule 145


State 165

	Parameter -> TypeName zero(StorageLocation) ident .    (rule 41)

	","            reduce using rule 41
	")"            reduce using rule 41


State 166

	ReturnParam -> "returns" ParameterList .            (rule 45)

	"{"            reduce using rule 45
	";"            reduce using rule 45


State 167

	FunctionDefinition -> function ident ParameterList list(FuncMods) zero(ReturnParam) TermBlock .    (rule 28)

	"string"       reduce using rule 28
	function       reduce using rule 28
	"address"      reduce using rule 28
	"bool"         reduce using rule 28
	"var"          reduce using rule 28
	"using"        reduce using rule 28
	"event"        reduce using rule 28
	"modifier"     reduce using rule 28
	"}"            reduce using rule 28
	ident          reduce using rule 28


State 168

	list1(ModExpList) -> ModExpList .                   (rule 140)
	list1(ModExpList) -> ModExpList . list1(ModExpList)    (rule 141)

	"decimalnum"   shift, and enter state 120
	"true"         shift, and enter state 121
	"false"        shift, and enter state 122
	ident          shift, and enter state 123
	stringLiteral  shift, and enter state 124
	")"            reduce using rule 140

	ModExpList     goto state 168
	ExpressionList goto state 169
	Expression     goto state 170
	PrimaryExpressiongoto state 117
	BooleanLiteral goto state 118
	NumberLiteral  goto state 119
	list1(ModExpList)goto state 179

State 169

	ModExpList -> ExpressionList .                      (rule 32)

	"decimalnum"   reduce using rule 32
	"true"         reduce using rule 32
	"false"        reduce using rule 32
	ident          reduce using rule 32
	stringLiteral  reduce using rule 32
	")"            reduce using rule 32


State 170

	ExpressionList -> Expression . list(ExprList)       (rule 71)

	"decimalnum"   reduce using rule 99
	"true"         reduce using rule 99
	"false"        reduce using rule 99
	","            shift, and enter state 178
	ident          reduce using rule 99
	stringLiteral  reduce using rule 99
	")"            reduce using rule 99

	ExprList       goto state 175
	list(ExprList) goto state 176
	list1(ExprList)goto state 177

State 171

	ModifierInvocation -> ident "(" list(ModExpList) . ")"    (rule 31)

	")"            shift, and enter state 174


State 172

	list(ModExpList) -> list1(ModExpList) .             (rule 102)

	")"            reduce using rule 102


State 173

	NumberLiteral -> "decimalnum" numberunit .          (rule 88)

	"decimalnum"   reduce using rule 88
	"true"         reduce using rule 88
	"false"        reduce using rule 88
	";"            reduce using rule 88
	","            reduce using rule 88
	ident          reduce using rule 88
	stringLiteral  reduce using rule 88
	")"            reduce using rule 88


State 174

	ModifierInvocation -> ident "(" list(ModExpList) ")" .    (rule 31)

	"external"     reduce using rule 31
	"public"       reduce using rule 31
	"internal"     reduce using rule 31
	"private"      reduce using rule 31
	"constant"     reduce using rule 31
	"view"         reduce using rule 31
	"pure"         reduce using rule 31
	"payable"      reduce using rule 31
	"returns"      reduce using rule 31
	"{"            reduce using rule 31
	";"            reduce using rule 31
	ident          reduce using rule 31


State 175

	list1(ExprList) -> ExprList .                       (rule 136)
	list1(ExprList) -> ExprList . list1(ExprList)       (rule 137)

	"decimalnum"   reduce using rule 136
	"true"         reduce using rule 136
	"false"        reduce using rule 136
	","            shift, and enter state 178
	ident          reduce using rule 136
	stringLiteral  reduce using rule 136
	")"            reduce using rule 136

	ExprList       goto state 175
	list1(ExprList)goto state 183

State 176

	ExpressionList -> Expression list(ExprList) .       (rule 71)

	"decimalnum"   reduce using rule 71
	"true"         reduce using rule 71
	"false"        reduce using rule 71
	ident          reduce using rule 71
	stringLiteral  reduce using rule 71
	")"            reduce using rule 71


State 177

	list(ExprList) -> list1(ExprList) .                 (rule 98)

	"decimalnum"   reduce using rule 98
	"true"         reduce using rule 98
	"false"        reduce using rule 98
	ident          reduce using rule 98
	stringLiteral  reduce using rule 98
	")"            reduce using rule 98


State 178

	ExprList -> "," . Expression                        (rule 72)

	"decimalnum"   shift, and enter state 120
	"true"         shift, and enter state 121
	"false"        shift, and enter state 122
	ident          shift, and enter state 123
	stringLiteral  shift, and enter state 124

	Expression     goto state 182
	PrimaryExpressiongoto state 117
	BooleanLiteral goto state 118
	NumberLiteral  goto state 119

State 179

	list1(ModExpList) -> ModExpList list1(ModExpList) .    (rule 141)

	")"            reduce using rule 141


State 180

	VariableDeclaration -> TypeName zero(StorageLocation) . ident    (rule 78)

	ident          shift, and enter state 181


State 181

	VariableDeclaration -> TypeName zero(StorageLocation) ident .    (rule 78)

	";"            reduce using rule 78


State 182

	ExprList -> "," Expression .                        (rule 72)

	"decimalnum"   reduce using rule 72
	"true"         reduce using rule 72
	"false"        reduce using rule 72
	","            reduce using rule 72
	ident          reduce using rule 72
	stringLiteral  reduce using rule 72
	")"            reduce using rule 72


State 183

	list1(ExprList) -> ExprList list1(ExprList) .       (rule 137)

	"decimalnum"   reduce using rule 137
	"true"         reduce using rule 137
	"false"        reduce using rule 137
	ident          reduce using rule 137
	stringLiteral  reduce using rule 137
	")"            reduce using rule 137


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 148
Number of terminals: 67
Number of non-terminals: 85
Number of states: 184
