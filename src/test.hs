module Test where
        import Test.HUnit  
        import Solidiscan.Parser
        import Solidiscan.Lexer
        import Solidiscan.AST
        import Analysis.Visibility_Check
        import Helper_Functions
        
        -- Run parse allows the ability to run the parser from within GHCI, passing in the test case that failed
        -- runTest n = (reverse(solidiscan(alexScanTokens2 n)))
        
        -- Using function composition it is possible to remove the 'n' from both
        -- sides of the function
        runTest :: String -> [ProgSource]
        runTest = reverse . solidiscan . alexScanTokens2 
        
        -- filtEmpty :: [Solidiscan.AST.SourceUnit] -> [Solidiscan.AST.SourceUnit] 
        -- filtEmpty p (SourceUnit lol) = SourceUnit (filter p lol)
        -- ilterEmpt lst n = filter (not . n) lst
        
        -- Creating a list of unit tests for each element.
        -- TODO: Finish test cases for basic solidity parser
        parserTests = TestList [ "Pragma Directive Parsing Version" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\") (Version \"0.1.0\") 1)]" ~=? (show(reverse(solidiscan(alexScanTokens2 "pragma solidity ^0.1.0;")))),
                                 "Pragma Directive Parsing Version Test 2" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\") (Version \"0.2.0\") 1)]" ~=? (show $ runTest "pragma solidity ^0.2.0;"),
                                 "Pragma Directive Parsing Version Test 3" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\") (Version \"0.4.4\") 1)]" ~=? (show $ runTest "pragma solidity ^0.4.4;"),
                                 "Pragma Directive and Contract Definitions" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\") (Version \"0.1.0\") 1),ContractDef (Contract (Identifier \"test_1\") [] [])]" ~=? (show $ runTest "pragma solidity ^0.1.0; contract test_1 {}"),
                                 "Pragma Directive and Multiple Contracts" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\") (Version \"0.1.0\") 1),ContractDef (Contract (Identifier \"test_1\") [] []),ContractDef (Contract (Identifier \"test_2\") [] []),ContractDef (Contract (Identifier \"test_3\") [] [])]" ~=? (show $ runTest "pragma solidity ^0.1.0; contract test_1 {} contract test_2 {} contract test_3 {} "),
                                 "Import Test" ~: "[ImportUnit (ImportDir \"test.sol\")]" ~=? (show $ runTest "import \"test.sol\";"),
                                 "Import All" ~: "[ImportUnit (ImportMulti (Identifier \"*\") [Identifier \"test\"] (Identifier \"from\") \"test.sol\")]" ~=? (show $ runTest "import * as test from \"test.sol\";"),
                                 "Import SymbolName" ~: "[ImportUnit (ImportMulti (Identifier \"test\") [Identifier \"test\"] (Identifier \"from\") \"test.sol\")]" ~=? (show $ runTest "import test as test from \"test.sol\";"),
                                 "Import SymbolName as SymbolName From Import File" ~: "[ImportUnit (ImportMulti (Identifier \"test\") [Identifier \"test\"] (Identifier \"from\") \"test.sol\")]" ~=? (show $ runTest "import test as test from \"test.sol\";"),
                                 "Import SymbolName From Import File" ~: "[ImportUnit (ImportMulti (Identifier \"test\") [] (Identifier \"from\") \"test.sol\")]" ~=? (show $ runTest "import test from \"test.sol\";"),
                                 "Contract Inheritance Specifier Test" ~: "[ContractDef (Contract (Identifier \"owner\") [] []),ContractDef (Contract (Identifier \"test\") [InheritanceSpec (InheritanceSpecifier (UserDefinedTypeName (Identifier \"owner\")) []) []] [])]" ~=? (show $ runTest "contract owner {} contract test is owner {}"),
                                 "Contract Inheritance Specifier Test" ~: "[ContractDef (Contract (Identifier \"owner\") [] []),ContractDef (Contract (Identifier \"test\") [InheritanceSpec (InheritanceSpecifier (UserDefinedTypeName (Identifier \"owner\")) []) [InheritanceSpecifier (UserDefinedTypeName (Identifier \"major\")) []]] [])]" ~=? (show $ runTest "contract owner {} contract test is owner,major {}"),
                                 "Contract Inheritance Specifier With Arguments" ~: "[ContractDef (Contract (Identifier \"base\") [] []),ContractDef (Contract (Identifier \"derived1\") [InheritanceSpec (InheritanceSpecifier (UserDefinedTypeName (Identifier \"Base\")) [[NumExpression (NumberLiteral 7 [])]]) []] [])]" ~=? (show $ runTest "contract base {} contract derived1 is Base(7) {}"),
                                 stateVartests,
                                 usingFortests,
                                 modifierTests,
                                 eventDefTests,
                                 functionDefTests,
                                 functionContentsTest]
                                 
        
                           {- "Test 2: Contract Def [Empty Contract]" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef (Contract (Identifier \"this_is_a_contract1\") [])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test2)))),
                           "Test 3: Multiple Empty Contract Assignments" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef (Contract (Identifier \"contract1\") []),ContractDef (Contract (Identifier \"contract2\") []),ContractDef (Contract (Identifier \"contract3\") []),ContractDef (Contract (Identifier \"contract4\") []),ContractDef (Contract (Identifier \"contract5\") []),ContractDef (Contract (Identifier \"contract6\") [])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test3)))),
                           "Test 4: Var/Func/Contract Assignments" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef(Contract (Identifier \"this_is_a_contract1\") [ContractContents (StateVariableDeclaration (ElemType \"address\") (Identifier \"bank_account1\"))]),ContractDef (Contract \"this_is_a_contract2\" [ContractContents (StateVariableDeclaration (ElemType \"var\") \"bank_account2\")])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test4)))),
                           "Test 5: UserDefined TypeName " ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef (Contract (Identifier \"contract1\") [ContractContents (StateVariableDeclaration (UserDefinedTypeName \"test\") [PublicKeyword \"public\"] (Identifier \"bank_acc1\") [])]),ContractDef (Contract (Identifier \"contract2\") [ContractContents (StateVariableDeclaration (UserDefinedTypeName \"var3\") [InternalKeyword \"internal\"] (Identifier \"bank_acc2\") [])])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test5)))),
                           "Test 6: UserDefined TypeName + Expression Assignment" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef (Contract (Identifier \"contract1\") [ContractContents (StateVariableDeclaration (UserDefinedTypeName \"test\") [PublicKeyword \"public\"] (Identifier \"bank_acc1\") [Expression \"expr\"])])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test6)))),
                           "Test 7: Variable Dec Keywords " ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef (Contract (Identifier \"contract1\") [ContractContents (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [PublicKeyword \"public\"] (Identifier \"bank_acc1\") [])]),ContractDef (Contract (Identifier \"contract2\") [ContractContents (StateVariableDeclaration (UserDefinedTypeName \"var3\") [InternalKeyword \"internal\"] (Identifier \"bank_acc2\") [])])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test7)))),
                           "Test 8: Multiple Address Assignment Variable Tests" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef (Contract (Identifier \"test_con1\") [ContractContents (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [PublicKeyword \"public\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [PrivateKeyword \"private\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [InternalKeyword \"internal\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [ConstantKeyword \"constant\"] (Identifier \"test\") [])])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test8)))),
                           "Test 9: Multiple Bool Assignment Variable Tests" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef (Contract (Identifier \"test_con1\") [ContractContents (StateVariableDeclaration (ElementaryTypeName (BoolType \"bool\")) [PublicKeyword \"public\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (BoolType \"bool\")) [PrivateKeyword \"private\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (BoolType \"bool\")) [InternalKeyword \"internal\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (BoolType \"bool\")) [ConstantKeyword \"constant\"] (Identifier \"test\") [])])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test9)))),
                           "Test 10: Multiple Var Assignment Variable Tests" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef (Contract (Identifier \"test_con1\") [ContractContents (StateVariableDeclaration (ElementaryTypeName (VarType \"var\")) [PublicKeyword \"public\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (VarType \"var\")) [PrivateKeyword \"private\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (VarType \"var\")) [InternalKeyword \"internal\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (VarType \"var\")) [ConstantKeyword \"constant\"] (Identifier \"test\") [])])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test10)))),
                           "Test 11: Multiple String Assignment Variable Tests" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef (Contract (Identifier \"test_con1\") [ContractContents (StateVariableDeclaration (ElementaryTypeName (StringType \"string\")) [PublicKeyword \"public\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (StringType \"string\")) [PrivateKeyword \"private\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (StringType \"string\")) [InternalKeyword \"internal\"] (Identifier \"test\") []),ContractContents (StateVariableDeclaration (ElementaryTypeName (StringType \"string\")) [ConstantKeyword \"constant\"] (Identifier \"test\") [])])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test11)))),
                           "Test 12: Import * As Test" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ImportUnit (ImportMulti \"*\" \"testName\" \"from\" \"filename\"),ContractDef (Contract (Identifier \"test_12\") [])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test12)))),
                           "Test 13: Single Line Comments" ~: "[SourceUnit (PragmaDirective (PragmaName \"solidity\")),ContractDef (Contract (Identifier \"this_is_a_contract1\") [])]" ~=? (show(reverse(solidiscan(alexScanTokens2 test13))))] -}
        
        stateVartests = TestList [ "State Variable Declaration Elementary Typename Test: Address" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [] (Identifier \"test_addr\") [])])]" ~=? (show $ runTest "contract test {address test_addr;}"),
                                   "State Variable Declaration Elementary Typename Test: Bool" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (BoolType \"bool\")) [] (Identifier \"test\") [])])]" ~=? (show $ runTest "contract test {bool test;}"),
                                   "State Variable Declaration Elementary Typename Test: String" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (StringType \"string\")) [] (Identifier \"test_string\") [])])]" ~=? (show $ runTest "contract test {string test_string;}"),
                                   "State Variable Declaration Elementary Typename Test: Var" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (VarType \"var\")) [] (Identifier \"test_var\") [])])]" ~=? (show $ runTest "contract test {var test_var;}"),
                                   "State Variable Declaration Elementary Typename Test: Int" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (IntType \"int\")) [] (Identifier \"test_int\") [])])]" ~=? (show $ runTest "contract test {int test_int;}"),
                                   "State Variable Declaration Elementary Typename Test: Uint" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (UIntType \"uint\")) [] (Identifier \"test_uint\") [])])]" ~=? (show $ runTest "contract test {uint test_uint;}"),
                                   "State Variable Declaration Elementary Typename Test: Byte" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (UserDefinedTypeName (Identifier \"byte\")) [] (Identifier \"test_byte\") [])])]" ~=? (show $ runTest "contract test {byte test_byte;}"),
                                   "State Variable Declaration Elementary Typename Test: Fixed" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (FixedType \"fixed\")) [] (Identifier \"test_fixed\") [])])]"  ~=? (show $ runTest "contract test {fixed test_fixed;}"),
                                   "State Variable Declaration Elementary Typename Test: Ufixed" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (UFixedType \"ufixed\")) [] (Identifier \"test_ufixed\") [])])]" ~=? (show $ runTest "contract test {ufixed test_ufixed;}"),
                                   "State Variable Declaration Mapping Typename Test: Address => Uint" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (Mapping (AddrType \"address\") (ElementaryTypeName (UIntType \"uint\"))) [] (Identifier \"test_map\") [])])]" ~=? (show $ runTest "contract test {mapping (address => uint) test_map;}"),
                                   "State Variable Declaration Mapping Typename Test: Uint256 => UserDefinedTypename" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (Mapping (UIntType \"uint256\") (UserDefinedTypeName (Identifier \"testType\"))) [] (Identifier \"test_map\") [])])]" ~=? (show $ runTest "contract test {mapping (uint256 => testType) test_map;}"),
                                   "State Variable Declaration Mapping Typename Test: Fixed => Uint" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (Mapping (FixedType \"fixed\") (ElementaryTypeName (UIntType \"uint\"))) [] (Identifier \"test_map\") [])])]" ~=? (show $ runTest "contract test {mapping (fixed => uint) test_map;}"),
                                   "State Variable Declaration Mapping Typename Test: Bytes32 => Address" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (Mapping (ByteType \"bytes32\") (ElementaryTypeName (AddrType \"address\"))) [] (Identifier \"test_map\") [])])]" ~=? (show $ runTest "contract test {mapping (bytes32 => address) test_map;}"),
                                   "State Variable Declaration Array TypeName Test" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ArrayType (ElementaryTypeName (AddrType \"address\")) [NumExpression (NumberLiteral 1 [])]) [] (Identifier \"test\") [])])]" ~=? (show $ runTest "contract test {address [ 1 ] test;}"),
                                   "State Variable Declaration Elementary Typename Expression Test: Address" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [] (Identifier \"test_addr\") [IdentExpression \"test\"])])]" ~=? (show $ runTest "contract test {address test_addr = test;}"),
                                   "State Variable Declaration Elementary Typename Expression Test: Bool" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (BoolType \"bool\")) [] (Identifier \"test\") [BoolExpression (BooleanLiteral \"true\")])])]" ~=? (show $ runTest "contract test {bool test = true;}"),
                                   "State Variable Declaration Elementary Typename Expression Test: String" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (StringType \"string\")) [] (Identifier \"test_string\") [StringExpression \"test\"])])]" ~=? (show $ runTest "contract test {string test_string = \"test\";}"),
                                   "State Variable Declaration Elementary Typename Expression Test: Var" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (VarType \"var\")) [] (Identifier \"test_var\") [IdentExpression \"test\"])])]" ~=? (show $ runTest "contract test {var test_var = test;}"),
                                   "State Variable Declaration Elementary Typename Expression Test: Int" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (IntType \"int\")) [] (Identifier \"test_int\") [NumExpression (NumberLiteral 10 [])])])]" ~=? (show $ runTest "contract test {int test_int = 10;}"),
                                   "State Variable Declaration Elementary Typename Expression Test: Int with number unit" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (IntType \"int\")) [] (Identifier \"test_int\") [NumExpression (NumberLiteral 10 [\"wei\"])])])]" ~=? (show $ runTest "contract test {int test_int = 10wei;}"),
                                   "State Variable Declaration Elementary Typename Expression Test: Uint" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (UIntType \"uint\")) [] (Identifier \"test_uint\") [NumExpression (NumberLiteral 256 [])])])]" ~=? (show $ runTest "contract test {uint test_uint = 256;}"),
                                   "State Variable Declaration Elementary Typename Expression Test: Byte" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (UserDefinedTypeName (Identifier \"byte\")) [] (Identifier \"test_byte\") [NumExpression (NumberLiteral 32 [])])])]" ~=? (show $ runTest "contract test {byte test_byte = 32;}"),
                                   "State Variable Declaration Public Test: Address" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [PublicKeyword \"public\"] (Identifier \"test_addr\") [])])]" ~=? (show $ runTest "contract test {address public test_addr;}"),
                                   "State Variable Declaration Internal Test: Address" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [InternalKeyword \"internal\"] (Identifier \"test_addr\") [])])]" ~=? (show $ runTest "contract test {address internal test_addr;}"),
                                   "State Variable Declaration Private Test: Address" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [PrivateKeyword \"private\"] (Identifier \"test_addr\") [])])]" ~=? (show $ runTest "contract test {address private test_addr;}"),
                                   "State Variable Declaration Constant Test: Address" ~: "[ContractDef (Contract (Identifier \"test\") [] [StateVarDec (StateVariableDeclaration (ElementaryTypeName (AddrType \"address\")) [ConstantKeyword \"constant\"] (Identifier \"test_addr\") [])])]" ~=? (show $ runTest "contract test {address constant test_addr;}")]
        
        usingFortests = TestList ["Using for Declaration Test" ~: "[ContractDef (Contract (Identifier \"test\") [] [UsingFor (UsingForDeclaration \"using\" (Identifier \"search\") \"for\" (ArrayType (ElementaryTypeName (UIntType \"uint\")) []))])]" ~=? (show $ runTest "contract test {using search for uint[];}"),
                                  "Using for Declaration Test 2" ~: "[ContractDef (Contract (Identifier \"test\") [] [UsingFor (UsingForDeclaration \"using\" (Identifier \"search\") \"for\" (ElementaryTypeName (ByteType \"bytes32\")))])]" ~=? (show $ runTest "contract test {using search for bytes32;}"),
                                  "Using for Declaration Test 3" ~: "[ContractDef (Contract (Identifier \"test\") [] [UsingFor (UsingForDeclaration \"using\" (Identifier \"search\") \"for\" (ElementaryTypeName (AddrType \"address\")))])]" ~=? (show $ runTest "contract test {using search for address;}")]
        
        modifierTests = TestList ["Modifier Test" ~: "[ContractDef (Contract (Identifier \"test\") [] [ModDef (ModifierDefinition (Identifier \"test\") [[]] [BlockStatements [FunctionCall (IdentExpression \"require\") (ExpLst [[EqualExp (MemberAccess (IdentExpression \"msg\") \".\" (Identifier \"sender\")) (IdentExpression \"owner\")]]),PlaceholderStatement \"_\"]])])]" ~=? (show $ runTest "contract test {modifier test() { require(msg.sender == owner); _;}}"),
                                  "Modifier Test 2" ~: "[ContractDef (Contract (Identifier \"test\") [] [ModDef (ModifierDefinition (Identifier \"test\") [[]] [BlockStatements [FunctionCall (IdentExpression \"require\") (ExpLst [[NotExpression (IdentExpression \"locked\")]]),LValEqual (IdentExpression \"locked\") (BoolExpression (BooleanLiteral \"true\")),PlaceholderStatement \"_\",LValEqual (IdentExpression \"locked\") (BoolExpression (BooleanLiteral \"false\"))]])])]" ~=? (show $ runTest "contract test {modifier test() { require(!locked); locked = true; _; locked = false;}}")]
        
        eventDefTests = TestList ["Event Definition Test" ~: "[ContractDef (Contract (Identifier \"test\") [] [EventDef (EventDefinition (Identifier \"Deposit\") [[[EParameters (ElementaryTypeName (AddrType \"address\")) (Identifier \"_from\"),EParameters (ElementaryTypeName (ByteType \"bytes32\")) (Identifier \"_id\"),EParameters (ElementaryTypeName (UIntType \"uint\")) (Identifier \"_value\")]]])])]" ~=? (show $ runTest "contract test { event Deposit(address indexed _from, bytes32 indexed _id, uint _value);}"),
                                  "Event Definition Test 2" ~: "[ContractDef (Contract (Identifier \"test\") [] [EventDef (EventDefinition (Identifier \"Deposit\") [[[EParameters (ElementaryTypeName (AddrType \"address\")) (Identifier \"_from\")]]])])]" ~=? (show $ runTest "contract test { event Deposit(address indexed _from);}"),
                                  "Event Definition Test 3" ~: "[ContractDef (Contract (Identifier \"test\") [] [EventDef (EventDefinition (Identifier \"Deposit\") [[[EParameters (ElementaryTypeName (AddrType \"address\")) (Identifier \"_from\"),EParameters (ElementaryTypeName (UIntType \"uint\")) (Identifier \"test\"),EParameters (ElementaryTypeName (ByteType \"bytes32\")) (Identifier \"test\"),EParameters (ElementaryTypeName (UIntType \"uint\")) (Identifier \"test\")]]])])]" ~=? (show $ runTest "contract test { event Deposit(address indexed _from, uint test, bytes32 indexed test, uint indexed test);}")]
        
        functionDefTests = TestList ["Function Definition Test: Empty Function" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () {}}"),
                                     "Function Definition Test: Function Returns Uint" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [ReturnParam [[Parameter (ElementaryTypeName (UIntType "uint")) [] []]]] [BlockStatements []])])] ~=? (runTest "contract test { function test () returns(uint) {}}"),
                                     "Function Definition Test: Two Uint Function Params" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [[Parameter (ElementaryTypeName (UIntType "uint")) [] [Identifier "a"],Parameter (ElementaryTypeName (UIntType "uint")) [] [Identifier "b"]]] [] [] [BlockStatements []])])] ~=? (runTest "contract test { function test (uint a, uint b) {}}"),
                                     "Function Definition Test: Two Uint, Address Function Params" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [[Parameter (ElementaryTypeName (UIntType "uint")) [] [Identifier "a"],Parameter (ElementaryTypeName (UIntType "uint")) [] [Identifier "b"],Parameter (ElementaryTypeName (AddrType "address")) [] [Identifier "c"]]] [] [] [BlockStatements []])])] ~=? (runTest "contract test { function test (uint a, uint b, address c) {}}"),
                                     "Function Definition Test: Function Visibility" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [FuncVars (ExternalKeyword "external")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () external {}}"),
                                     "Function Definition Test: Function Visibility" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [FuncVars (InternalKeyword "internal")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () internal {}}"),
                                     "Function Definition Test: Function Visibility" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [FuncVars (PublicKeyword "public")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () public {}}"),
                                     "Function Definition Test: Function Visibility" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [FuncVars (PrivateKeyword "private")] [] [BlockStatements []])])]~=? (runTest "contract test { function test () private {}}"),
                                     "Function Definition Test: State Mutability" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (PureKeyword "pure")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () pure {}}"),
                                     "Function Definition Test: State Mutability" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ConstantKeyword "constant")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () constant {}}"),
                                     "Function Definition Test: State Mutability" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ViewKeyword "view")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () view {}}"),
                                     "Function Definition Test: State Mutability" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (PayableKeyword "payable")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () payable {}}"),
                                     "Function Definition Test: Multiple Function Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [FuncVars (PublicKeyword "public"),StateMutability (PayableKeyword "payable")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () public payable {}}"),
                                     "Function Definition Test: Multiple Function Visibility" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [FuncVars (ExternalKeyword "external"),StateMutability (PayableKeyword "payable")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () external payable {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (PureKeyword "pure"),FuncVars (ExternalKeyword "external")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () pure external {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (PureKeyword "pure"),FuncVars (InternalKeyword "internal")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () pure internal {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ConstantKeyword "constant"),FuncVars (InternalKeyword "internal")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () constant internal {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ConstantKeyword "constant"),FuncVars (ExternalKeyword "external")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () constant external {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ConstantKeyword "constant"),FuncVars (PublicKeyword "public")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () constant public {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ConstantKeyword "constant"),FuncVars (PrivateKeyword "private")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () constant private {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ConstantKeyword "constant"),FuncVars (PublicKeyword "public")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () constant public {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ViewKeyword "view"),FuncVars (PublicKeyword "public")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () view public {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ViewKeyword "view"),FuncVars (PrivateKeyword "private")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () view private {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ViewKeyword "view"),FuncVars (InternalKeyword "internal")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () view internal {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ViewKeyword "view"),FuncVars (ExternalKeyword "external")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () view external {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ConstantKeyword "constant"),StateMutability (PayableKeyword "payable"),FuncVars (PublicKeyword "public")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () constant payable public {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ViewKeyword "view"),StateMutability (PayableKeyword "payable"),FuncVars (PublicKeyword "public")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () view payable public {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ConstantKeyword "constant"),StateMutability (PayableKeyword "payable"),FuncVars (ExternalKeyword "external")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () constant payable external {}}"),
                                     "Function Definition Test: State Mutability and Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ViewKeyword "view"),StateMutability (PayableKeyword "payable"),FuncVars (ExternalKeyword "external")] [] [BlockStatements []])])] ~=? (runTest "contract test { function test () view payable external {}}"),
                                     "Function Definition Test: Function Visibility and Returns" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [FuncVars (PublicKeyword "public"),StateMutability (PayableKeyword "payable")] [ReturnParam [[Parameter (ElementaryTypeName (UIntType "uint")) [] []]]] [BlockStatements []])])] ~=? (runTest "contract test{ function test() public payable returns(uint){}}"),
                                     "Function Definition Test: Function Visibility and Returns" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [FuncVars (PublicKeyword "public"),StateMutability (PayableKeyword "payable")] [ReturnParam [[Parameter (ElementaryTypeName (AddrType "address")) [] []]]] [BlockStatements []])])] ~=? (runTest "contract test{ function test() public payable returns(address){}}"),
                                     "Function Definition Test: Function Params, Visibility and Return" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [[Parameter (ElementaryTypeName (AddrType "address")) [] [Identifier "a"],Parameter (ElementaryTypeName (UIntType "uint")) [] [Identifier "b"]]] [FuncVars (PublicKeyword "public"),StateMutability (PayableKeyword "payable")] [ReturnParam [[Parameter (ElementaryTypeName (AddrType "address")) [] [],Parameter (ElementaryTypeName (UIntType "uint")) [] []]]] [BlockStatements []])])] ~=? (runTest "contract test{ function test(address a, uint b) public payable returns(address, uint){}}"),
                                     "Function Definition Test: Multiple Functions" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [] [] [] [BlockStatements []])])] ~=? (runTest "contract test{ function test() {} function test2() {}}"),
                                     "Function Definition Test: Multiple Functions" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [[Parameter (ElementaryTypeName (UIntType "uint")) [] [Identifier "a"]]] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [[Parameter (ElementaryTypeName (UIntType "uint")) [] [Identifier "b"]]] [] [] [BlockStatements []])])] ~=? (runTest "contract test{ function test(uint a) {} function test2(uint b) {}}"),
                                     "Function Definition Test: Multiple Functions, Params, Visibility" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [[Parameter (ElementaryTypeName (UIntType "uint")) [] [Identifier "a"]]] [FuncVars (PublicKeyword "public")] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [[Parameter (ElementaryTypeName (UIntType "uint")) [] [Identifier "b"]]] [FuncVars (InternalKeyword "internal")] [] [BlockStatements []])])] ~=? (runTest "contract test{ function test(uint a) public {} function test2(uint b) internal {}}"),
                                     "Function Definition Test: Multiple Functions" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [[Parameter (ElementaryTypeName (UIntType "uint")) [] [Identifier "a"]]] [FuncVars (PublicKeyword "public")] [ReturnParam [[Parameter (ElementaryTypeName (UIntType "uint")) [] []]]] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [[Parameter (ElementaryTypeName (AddrType "address")) [] [Identifier "b"]]] [FuncVars (PrivateKeyword "private")] [] [BlockStatements []])])] ~=? (runTest "contract test{ function test(uint a) public returns (uint) {} function test2(address b) private {}}"),
                                     "Function Definition Test: Multiple Functions" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test3") [] [] [] [BlockStatements []])])] ~=? (runTest "contract test{ function test() {} function test2() {} function test3() {}}"),
                                     "Function Definition Test: Multiple Functions" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test3") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test4") [] [] [] [BlockStatements []])])] ~=? (runTest "contract test{ function test() {} function test2() {} function test3() {} function test4() {}}"),
                                     "Function Definition Test: Multiple Functions" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test3") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test4") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test5") [] [] [] [BlockStatements []])])] ~=? (runTest "contract test{ function test() {} function test2() {} function test3() {} function test4() {} function test5() {}}"),
                                     "Function Definition Test: Multiple Functions" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test3") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test4") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test5") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test6") [] [] [] [BlockStatements []])])] ~=? (runTest "contract test{ function test() {} function test2() {} function test3() {} function test4() {} function test5() {} function test6() {} }"),
                                     "Function Definition Test: Multiple Contracts and Functions" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements []])]),ContractDef (Contract (Identifier "test2") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements []])])] ~=? (runTest "contract test{ function test() {}} contract test2 { function test() {}}"),
                                     "Function Definition Test: Multiple Contracts and Multiple Functions" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [] [FuncVars (PublicKeyword "public")] [] [BlockStatements []])]),ContractDef (Contract (Identifier "test2") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [FuncVars (PrivateKeyword "private")] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [] [FuncVars (InternalKeyword "internal")] [] [BlockStatements []])])] ~=? ( runTest "contract test{ function test() {} function test2() public {}} contract test2 { function test() private {} function test2() internal {}}"),
                                     "Function Definition Test: Multiple Contracts and Multiple Functions" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements []]),FunctionDefinition (FunctionDef (Identifier "test2") [] [FuncVars (PublicKeyword "public")] [] [BlockStatements []])]),ContractDef (Contract (Identifier "test2") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [FuncVars (PrivateKeyword "private")] [] [BlockStatements []])]),ContractDef (Contract (Identifier "test3") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [StateMutability (ViewKeyword "view")] [] [BlockStatements []])])] ~=? (runTest "contract test{ function test() {} function test2() public {}} contract test2 { function test() private {}} contract test3 { function test() view {}}"),
                                     "FallBack Function Test" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FallBackFunc [] [] [BlockStatements []])])] ~=? (runTest "contract test{ function () {}}"),
                                     "FallBack Function Test" ~: [ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FallBackFunc [StateMutability (PureKeyword "pure")] [] [BlockStatements []])])] ~=? (runTest "contract test { function () pure {}}")]
                                     --"Function Definition Test: Basic Function" ~: ~=? (),]
        
        functionContentsTest = TestList ["Function Contents Test: Basic Statements" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements [LValEqual (IdentExpression "test") (StringExpression "string_test")]])])] ~=? (runTest "contract test{ function test() { test = \"string_test\";}}"),
                                         "Function Contents Test: Basic Statements" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements [LValEqual (IdentExpression "test") (NumExpression (NumberLiteral 10 []))]])])] ~=? (runTest "contract test{ function test() { test = 10;}}"),
                                         "Function Contents Test: Basic Statements" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements [LValEqual (IdentExpression "test") (BoolExpression (BooleanLiteral "true"))]])])] ~=? (runTest "contract test{ function test() { test = true;}}"),
                                         "Function Contents Test: Basic Statements" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements [LValEqual (IdentExpression "test") (IdentExpression "test")]])])] ~=? (runTest "contract test{ function test() { test = test;}}"),
                                         "Function Contents Test: Basic Statements" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements [LValEqual (IdentExpression "test") (ElemTypeExpression (UIntType "uint"))]])])] ~=? (runTest "contract test{ function test() { test = uint;}}"),
                                         "Function Contents Test: Basic Statements" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements [LValEqual (IdentExpression "test") (ElemTypeExpression (ByteType "bytes32"))]])])] ~=? (runTest "contract test{ function test() { test = bytes32;}}"),
                                         "Function Contents Test: Multiple Basic Statements" ~:[ContractDef (Contract (Identifier "test") [] [FunctionDefinition (FunctionDef (Identifier "test") [] [] [] [BlockStatements [LValEqual (IdentExpression "test") (ElemTypeExpression (ByteType "bytes32")),LValEqual (IdentExpression "test2") (StringExpression "test"),LValEqual (IdentExpression "test3") (NumExpression (NumberLiteral 3 []))]])])] ~=? (runTest "contract test{ function test() { test = bytes32; test2 = \"test\"; test3 = 3;}}")]
                                         --"Function Contents Test: Basic Statements" ~: ~=? (),
                                         --"Function Contents Test: Basic Statements" ~: ~=? (),]
        -- TODO Finish the test cases for function visibility
        {- testFunctionViews = TestList ["Test 1: No Function Visibility Specified" ~: "(Info \"Function Visibility\" \"No function visibility specified.\")" ~=? (show(funcVisCheck $ listConts $ runTest "pragma solidity ^0.1.0; contract test {function test() {}}"))]
        
        test1in = contractContentsGetter $ listConts $ runTest "pragma solidity ^0.4.0; contract test1 { function test() private {} }"
        test2in = contractContentsGetter $ listConts $ runTest "pragma solidity ^0.4.0; contract test1 { function test() private {} function test2() public {}}"
        test3in = contractContentsGetter $ listConts $ runTest "pragma solidity ^0.4.0; contract test1 { function test() payable {} function test2() public {}}"
        test4in = contractContentsGetter $ listConts $ runTest "pragma solidity ^0.4.0; contract test1 { function test() pure {} function test2() public {}}"
        test5in = contractContentsGetter $ listConts $ runTest "pragma solidity ^0.4.0; contract test1 { function test() pure {} function test2() private {} function test3() {} function test4() payable{}}"
        test6in = contractContentsGetter $ listConts $ runTest "pragma solidity ^0.4.0; contract test1 { function test() private {} } contract test_con2 { function test3() private{}}"
        test7in = contractContentsGetter $ listConts $ runTest "pragma solidity ^0.4.0; contract test1 { function test() private {} } contract test_con2 { function test3() {}}" -}